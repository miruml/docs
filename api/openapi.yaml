openapi: 3.0.3
info:
  title: Miru API
  version: 0.1.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://dev.api.miruml.com/{audience}/{version}
    description: Development
    variables:
      audience:
        default: internal
        enum:
          - internal
      version:
        default: v1
  - url: https://api.miruml.com/{audience}/{version}
    description: Production
    variables:
      audience:
        default: internal
        enum:
          - internal
      version:
        default: v1
security:
  - ClerkAuth: []
paths:
  /clients/{client_id}:
    get:
      tags:
        - Clients
      summary: Get a client
      operationId: getClient
      parameters:
        - $ref: '#/components/parameters/client_id'
      responses:
        '200':
          description: Successfully retrieved the client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
    put:
      tags:
        - Clients
      summary: Update a client
      operationId: updateClient
      parameters:
        - $ref: '#/components/parameters/client_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequest'
      responses:
        '200':
          description: Successfully updated the client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
    delete:
      tags:
        - Clients
      summary: Delete a client
      operationId: deleteClient
      parameters:
        - $ref: '#/components/parameters/client_id'
      responses:
        '200':
          description: Successfully deleted the client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /workspaces/{workspace_id}/clients:
    post:
      tags:
        - Clients
      summary: Create a client
      operationId: createClient
      parameters:
        - $ref: '#/components/parameters/workspace_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequest'
      responses:
        '200':
          description: Successfully created the client.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
    get:
      tags:
        - Clients
      summary: List clients in a workspace
      operationId: getClients
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/tag_list'
        - $ref: '#/components/parameters/order_by'
      responses:
        '200':
          description: Successfully retrieved the clients.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientList'
  /clients/tags:
    post:
      tags:
        - Client Tags
      summary: Tag a client
      operationId: addTagsToClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagClientsRequest'
      responses:
        '200':
          description: Successfully added the tags to the client.
    delete:
      tags:
        - Client Tags
      summary: Remove tags from a client
      operationId: deleteClientTags
      parameters:
        - $ref: '#/components/parameters/client_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteClientTagsRequest'
      responses:
        '200':
          description: Successfully deleted the tags.
  /configs/concrete/{concrete_config_id}:
    get:
      tags:
        - Concrete Configs
      summary: Get a concrete config
      operationId: getConcreteConfig
      parameters:
        - $ref: '#/components/parameters/concrete_config_id'
      responses:
        '200':
          description: Successfully retrieved the concrete config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcreteConfig'
  /workspaces/{workspace_id}/configs/concrete:
    get:
      tags:
        - Concrete Configs
      summary: List concrete configs in a workspace
      operationId: listConcreteConfigs
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/client_list'
        - $ref: '#/components/parameters/config_list'
        - $ref: '#/components/parameters/config_schema_list'
        - $ref: '#/components/parameters/git_repository_list'
        - $ref: '#/components/parameters/branch_list'
        - $ref: '#/components/parameters/commit_sha_list'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/parameters-order_by'
      responses:
        '200':
          description: Successfully got the concrete config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcreteConfigList'
  /configs/{config_id}:
    get:
      tags:
        - Configs
      summary: Get a config
      operationId: getConfig
      parameters:
        - $ref: '#/components/parameters/config_id'
      responses:
        '200':
          description: Successfully retrieved the config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
    put:
      tags:
        - Configs
      summary: Update a config
      operationId: updateConfig
      parameters:
        - $ref: '#/components/parameters/config_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        '200':
          description: Successfully updated the config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
    delete:
      tags:
        - Configs
      summary: Delete a config
      operationId: deleteConfig
      parameters:
        - $ref: '#/components/parameters/config_id'
      responses:
        '200':
          description: Successfully deleted the config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
  /workspaces/{workspace_id}/configs:
    post:
      tags:
        - Configs
      summary: Create a config
      operationId: createConfig
      parameters:
        - $ref: '#/components/parameters/workspace_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfigRequest'
      responses:
        '200':
          description: Successfully created the config.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
    get:
      tags:
        - Configs
      summary: List the configs in a workspace
      operationId: getConfigs
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
      responses:
        '200':
          description: Successfully retrieved the configs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigList'
  /configs/schemas/{config_schema_id}:
    get:
      tags:
        - Config Schemas
      summary: Get a config schema
      operationId: getConfigSchema
      parameters:
        - $ref: '#/components/parameters/config_schema_id'
      responses:
        '200':
          description: Successfully retrieved the config schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSchema'
    put:
      tags:
        - Config Schemas
      summary: Update a config schema
      operationId: updateConfigSchema
      parameters:
        - $ref: '#/components/parameters/config_schema_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigSchemaRequest'
      responses:
        '200':
          description: Successfully updated the config schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSchema'
    delete:
      tags:
        - Config Schemas
      summary: Delete a config schema
      operationId: deleteConfigSchema
      parameters:
        - $ref: '#/components/parameters/config_schema_id'
      responses:
        '200':
          description: Successfully deleted the config schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSchema'
  /workspaces/{workspace_id}/configs/schemas:
    post:
      tags:
        - Config Schemas
      summary: Create a config schema
      operationId: createConfigSchema
      parameters:
        - $ref: '#/components/parameters/workspace_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConfigSchemaRequest'
      responses:
        '200':
          description: Successfully created the config schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSchema'
    get:
      tags:
        - Config Schemas
      summary: List the config schemas for a workspace
      operationId: listConfigSchemas
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/git_repository_list'
        - $ref: '#/components/parameters/branch_list'
        - $ref: '#/components/parameters/commit_sha_list'
        - $ref: '#/components/parameters/config_list'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/components-parameters-order_by'
      responses:
        '200':
          description: Successfully retrieved the config schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigSchemaList'
  /configs/schemas/{config_schema_id}/commits:
    get:
      tags:
        - Git Commits
      summary: Get the git commits for a config schema
      operationId: getGitCommits
      parameters:
        - $ref: '#/components/parameters/config_schema_id'
        - $ref: '#/components/parameters/git_repository_list'
        - $ref: '#/components/parameters/branch_list'
        - $ref: '#/components/parameters/commit_sha_list'
        - $ref: '#/components/parameters/config_schema_list'
        - $ref: '#/components/parameters/config_list'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/git-commits_components-parameters-order_by'
      responses:
        '200':
          description: Successfully retrieved the git commits for a config schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitCommitList'
  /overrides/{override_id}:
    get:
      tags:
        - Overrides
      summary: Get an override
      operationId: getOverride
      parameters:
        - $ref: '#/components/parameters/override_id'
      responses:
        '200':
          description: Successfully retrieved the override.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Override'
    put:
      tags:
        - Overrides
      summary: Update an override
      operationId: updateOverride
      parameters:
        - $ref: '#/components/parameters/override_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOverrideRequest'
      responses:
        '200':
          description: Successfully updated the override.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Override'
    delete:
      tags:
        - Overrides
      summary: Delete an override
      operationId: deleteOverride
      parameters:
        - $ref: '#/components/parameters/override_id'
      responses:
        '200':
          description: Successfully deleted the override.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Override'
  /policies/{policy_id}/overrides:
    post:
      tags:
        - Overrides
      summary: Create an override
      operationId: createOverride
      parameters:
        - $ref: '#/components/parameters/policy_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOverrideRequest'
      responses:
        '200':
          description: Successfully created the override.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Override'
    get:
      tags:
        - Overrides
      summary: List the overrides in a policy
      operationId: listOverrides
      parameters:
        - $ref: '#/components/parameters/policy_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/overrides_components-parameters-order_by'
      responses:
        '200':
          description: Successfully retrieved the overrides.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OverrideList'
  /policies/{policy_id}:
    get:
      tags:
        - Policies
      summary: Get a policy
      operationId: getPolicy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      responses:
        '200':
          description: Successfully retrieved the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
    put:
      tags:
        - Policies
      summary: Update a policy
      operationId: updatePolicy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePolicyRequest'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
    delete:
      tags:
        - Policies
      summary: Delete a policy
      operationId: deletePolicy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      responses:
        '200':
          description: Successfully deleted the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /configs/{config_id}/policies:
    post:
      tags:
        - Policies
      summary: Create a policy
      operationId: createPolicy
      parameters:
        - $ref: '#/components/parameters/config_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
      responses:
        '200':
          description: Successfully created the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /workspaces/{workspace_id}/policies:
    get:
      tags:
        - Policies
      summary: List the policies in a workspace
      operationId: listPolicies
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/config_list'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
      responses:
        '200':
          description: Successfully retrieved the policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyList'
  /tag_types/{tag_type_id}:
    get:
      tags:
        - Tag Types
      summary: Get a tag type
      operationId: getTagType
      parameters:
        - $ref: '#/components/parameters/tag_type_id'
      responses:
        '200':
          description: Successfully retrieved the tag type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagType'
    put:
      tags:
        - Tag Types
      summary: Update a tag type
      operationId: updateTagType
      parameters:
        - $ref: '#/components/parameters/tag_type_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagTypeRequest'
      responses:
        '200':
          description: Successfully updated the tag type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagType'
    delete:
      tags:
        - Tag Types
      summary: Delete a tag type
      operationId: deleteTagType
      parameters:
        - $ref: '#/components/parameters/tag_type_id'
      responses:
        '200':
          description: Successfully deleted the tag type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagType'
  /workspaces/{workspace_id}/tag_types:
    post:
      tags:
        - Tag Types
      summary: Create a tag type
      operationId: createTagType
      parameters:
        - $ref: '#/components/parameters/workspace_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagTypeRequest'
      responses:
        '200':
          description: Successfully retrieved the tag type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagType'
    get:
      tags:
        - Tag Types
      summary: List the tag types in a workspace
      operationId: getTagTypes
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
      responses:
        '200':
          description: Successfully retrieved the tag types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagTypeList'
  /tags/{tag_id}:
    get:
      tags:
        - Tags
      summary: Get a tag
      operationId: getTag
      parameters:
        - $ref: '#/components/parameters/tag_id'
      responses:
        '200':
          description: Successfully retrieved the tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    put:
      tags:
        - Tags
      summary: Update a tag
      operationId: updateTag
      parameters:
        - $ref: '#/components/parameters/tag_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagRequest'
      responses:
        '200':
          description: Successfully updated the tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    delete:
      tags:
        - Tags
      summary: Delete a tag
      operationId: deleteTag
      parameters:
        - $ref: '#/components/parameters/tag_id'
      responses:
        '200':
          description: Successfully deleted the tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
  /tag_types/{tag_type_id}/tags:
    post:
      tags:
        - Tags
      summary: Create a tag
      operationId: createTag
      parameters:
        - $ref: '#/components/parameters/tag_type_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
      responses:
        '200':
          description: Successfully created the tag.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
  /workspaces/{workspace_id}/tags:
    get:
      tags:
        - Tags
      summary: List the tags in a workspace
      operationId: getTags
      parameters:
        - $ref: '#/components/parameters/workspace_id'
        - $ref: '#/components/parameters/tag_type_list'
        - $ref: '#/components/parameters/client_list'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
      responses:
        '200':
          description: Successfully retrieved the tags.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
  /users/{clerk_id}:
    get:
      tags:
        - Users
      summary: Get a user
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/clerk_id'
      responses:
        '200':
          description: Successfully retrieved the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Update a user
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/clerk_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Successfully updated the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /workspaces/{workspace_id}:
    get:
      tags:
        - Workspaces
      summary: Get a workspace
      operationId: getWorkspace
      parameters:
        - $ref: '#/components/parameters/workspace_id'
      responses:
        '200':
          description: Successfully retrieved the workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
    put:
      tags:
        - Workspaces
      summary: Update a workspace
      operationId: updateWorkspace
      parameters:
        - $ref: '#/components/parameters/workspace_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
      responses:
        '200':
          description: Successfully updated the workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
components:
  securitySchemes:
    ClerkAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    client_id:
      name: client_id
      in: path
      required: true
      description: The unique identifier of the client
      schema:
        type: string
        example: cli_123
    workspace_id:
      name: workspace_id
      in: path
      required: true
      description: The unique identifier of the workspace
      schema:
        type: string
        example: wsp_123
    page:
      name: page
      in: query
      required: false
      description: The page number to return
      schema:
        type: integer
        default: 1
    limit:
      name: limit
      in: query
      required: false
      description: The number of items to return
      schema:
        type: integer
        default: 10
        maximum: 100
    tag_list:
      name: tag[]
      in: query
      required: false
      description: The tags to filter by
      schema:
        type: array
        items:
          type: string
          example: tag_123
      style: form
      explode: true
    order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - created_at:asc
          - created_at:desc
          - updated_at:asc
          - updated_at:desc
          - name:asc
          - name:desc
    concrete_config_id:
      name: concrete_config_id
      in: path
      required: true
      description: The unique identifier of the concrete config
      schema:
        type: string
        example: cncr_cfg_123
    client_list:
      name: client[]
      in: query
      required: false
      description: The client to filter by
      schema:
        type: array
        items:
          type: string
          example: cli_123
      style: form
      explode: true
    config_list:
      name: config[]
      in: query
      required: false
      description: The config to filter by
      schema:
        type: array
        items:
          type: string
          example: cfg_123
      style: form
      explode: true
    config_schema_list:
      name: config_schema[]
      in: query
      required: false
      description: The config schema to filter by
      schema:
        type: array
        items:
          type: array
          items:
            type: string
            example: cfg_sch_123
      style: form
      explode: true
    git_repository_list:
      name: repository[]
      in: query
      required: false
      description: The repository to filter by
      schema:
        type: array
        items:
          type: string
          example: miruml/backend
      style: form
      explode: true
    branch_list:
      name: branch[]
      in: query
      required: false
      description: The branch to filter by
      schema:
        type: array
        items:
          type: string
          example: main
      style: form
      explode: true
    commit_sha_list:
      name: commit_sha[]
      in: query
      required: false
      description: The commit sha to filter by
      schema:
        type: array
        items:
          type: string
          example: 1a2b3c4d
      style: form
      explode: true
    parameters-order_by:
      name: order_by
      in: query
      required: false
      description: The field to order by and the direction. Format field:direction where direction is either 'asc' or 'desc'
      schema:
        type: string
        enum:
          - created_at:asc
          - created_at:desc
        example: created_at:desc
    config_id:
      name: config_id
      in: path
      required: true
      description: The unique identifier of the config
      schema:
        type: string
        example: cfg_123
    config_schema_id:
      name: config_schema_id
      in: path
      required: true
      description: The unique identifier of the config schema
      schema:
        type: string
        example: cfg_sch_123
    components-parameters-order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - created_at:asc
          - created_at:desc
          - updated_at:asc
          - updated_at:desc
          - name:asc
          - name:desc
          - version:asc
          - version:desc
    git-commits_components-parameters-order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - created_at:asc
          - created_at:desc
          - updated_at:asc
          - updated_at:desc
    override_id:
      name: override_id
      in: path
      required: true
      description: The unique identifier of the override
      schema:
        type: string
        example: ovrd_123
    policy_id:
      name: policy_id
      in: path
      required: true
      description: The unique identifier of the policy
      schema:
        type: string
        example: rlst_123
    overrides_components-parameters-order_by:
      name: order_by
      in: query
      required: false
      schema:
        type: string
        enum:
          - created_at:asc
          - created_at:desc
          - updated_at:asc
          - updated_at:desc
          - hierarchy_position:asc
          - hierarchy_position:desc
          - name:asc
          - name:desc
    tag_type_id:
      name: tag_type_id
      in: path
      required: true
      description: The unique identifier of the tag type
      schema:
        type: string
        example: tag_type_123
    tag_id:
      name: tag_id
      in: path
      required: true
      description: The unique identifier of the tag
      schema:
        type: string
        example: tag_123
    tag_type_list:
      name: tag_type[]
      in: query
      required: false
      description: The tag type to filter by
      schema:
        type: array
        items:
          type: string
          example: tag_type_123
      style: form
      explode: true
    clerk_id:
      name: clerk_id
      in: path
      required: true
      description: The unique identifier of the user in Clerk
      schema:
        type: string
        example: user_123
  schemas:
    BillingPlan:
      type: string
      enum:
        - hobby
        - startup
        - enterprise
      x-enum-varnames:
        - BILLING_PLAN_HOBBY
        - BILLING_PLAN_STARTUP
        - BILLING_PLAN_ENTERPRISE
    Workspace:
      title: Workspace
      type: object
      required:
        - object
        - id
        - name
      properties:
        object:
          type: string
          enum:
            - workspace
          example: workspace
        id:
          type: string
          example: wrk_1234
        name:
          type: string
          example: Acme, Inc.
        billing_plan:
          $ref: '#/components/schemas/BillingPlan'
    User:
      title: User
      type: object
      required:
        - object
        - id
        - email
        - first_name
        - last_name
        - created_at
        - updated_at
        - workspace_id
        - workspace
      properties:
        object:
          type: string
          enum:
            - user
          example: user
        id:
          type: string
          example: usr_1234
        email:
          type: string
          example: ben@miruml.com
        first_name:
          type: string
          example: Ben
          nullable: true
        last_name:
          type: string
          example: Smidt
          nullable: true
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        workspace_id:
          type: string
          example: wks_1234
        workspace:
          allOf:
            - $ref: '#/components/schemas/Workspace'
          nullable: true
          example: null
    PaginatedList:
      title: Paginated List
      type: object
      required:
        - object
        - total_count
        - limit
        - offset
        - page
        - next_page
        - previous_page
        - has_more
        - data
      properties:
        object:
          type: string
          enum:
            - list
          example: list
        total_count:
          type: integer
          format: int64
          example: 15
        limit:
          type: integer
          example: 25
        offset:
          type: integer
          example: 0
          nullable: true
        next:
          type: string
          example: null
          nullable: true
        previous:
          type: string
          example: null
          nullable: true
        has_more:
          type: boolean
          example: false
    TagType:
      title: Tag Type
      type: object
      required:
        - object
        - id
        - name
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - created_by
        - updated_by
        - schema
      properties:
        object:
          type: string
          enum:
            - tag_type
          example: tag_type
        id:
          type: string
          example: tag_type_123
        name:
          type: string
          example: Customer
          description: name of the tag type
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
                tag_type_field_id: tag_type_field_123
              speed:
                type: integer
                minimum: 1
                default: 10
                tag_type_field_id: tag_type_field_456
            required:
              - device_id
              - speed
    Tag:
      title: Tag
      type: object
      required:
        - object
        - id
        - name
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - tag_type_id
        - created_by
        - updated_by
        - tag_type
        - metadata
      properties:
        object:
          type: string
          enum:
            - tag
          example: tag
        id:
          type: string
          example: tag_123
        name:
          type: string
          example: Apple
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        tag_type_id:
          type: string
          example: tag_type_123
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        tag_type:
          allOf:
            - $ref: '#/components/schemas/TagType'
          nullable: true
          example: null
        metadata:
          type: object
          example:
            device_id: device_123
            speed: 10
          nullable: true
    TagList:
      title: Tag List
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
    Client:
      title: Client
      type: object
      required:
        - object
        - id
        - name
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - created_by
        - updated_by
        - tags
      properties:
        object:
          type: string
          enum:
            - client
          example: client
        id:
          type: string
          example: cli_123
        name:
          type: string
          example: My Client
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
          nullable: true
          example:
            object: list
            total_count: -1
            limit: -1
            page: -1
            next_page: null
            previous_page: null
            has_more: false
            data: []
    UpdateClientRequest:
      title: Update Client Request
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Robot 1
    ClientList:
      title: Client List
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Client'
    CreateClientRequest:
      title: Create Client Request
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Robot 1
    TagClientsRequest:
      title: Add Clients to Tag Request
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            type: object
            properties:
              client_id:
                type: string
                example: cli_123
              tag_id:
                type: string
                example: tag_123
    DeleteClientTagsRequest:
      title: Delete Clients from Tag Request
      type: object
      required:
        - tags
      properties:
        tags:
          type: array
          items:
            type: object
            properties:
              client_id:
                type: string
                example: cli_123
              tag_id:
                type: string
                example: tag_123
    ConfigSchema:
      title: Config Schema
      type: object
      required:
        - object
        - id
        - name
        - version
        - created_at
        - updated_at
        - digest
        - created_by_id
        - updated_by_id
        - schema_id
        - policy_id
        - config_id
        - created_by
        - updated_by
        - schema
        - policy
        - config
        - git_commits
      properties:
        object:
          type: string
          enum:
            - config_schema
          example: config_schema
        id:
          type: string
          example: cfg_sch_123
        version:
          type: integer
          example: 2
        created_at:
          type: string
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00Z'
        digest:
          type: string
          example: '1234567890'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        policy_id:
          type: string
          example: policy_123
        config_id:
          type: string
          example: config_123
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
              speed:
                type: integer
                minimum: 1
                default: 10
            required:
              - device_id
              - speed
          nullable: true
        policy:
          allOf:
            - $ref: '#/components/schemas/Policy'
          example: null
        config:
          allOf:
            - $ref: '#/components/schemas/Config'
          example: null
        git_commits:
          $ref: '#/components/schemas/GitCommitList'
    ConfigSchemaList:
      title: Base Config Schema List
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConfigSchema'
    Policy:
      title: Policy
      type: object
      required:
        - object
        - id
        - name
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - config_id
        - created_by
        - updated_by
        - config
        - schema
        - overrides
        - config_schemas
      properties:
        object:
          type: string
          enum:
            - policy
          example: policy
        id:
          type: string
          example: policy_123
        name:
          type: string
          example: My Policy
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        config_id:
          type: string
          example: config_123
        config:
          allOf:
            - $ref: '#/components/schemas/Config'
          nullable: true
          example: null
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
              speed:
                type: integer
                minimum: 1
                default: 10
            required:
              - device_id
              - speed
        overrides:
          allOf:
            - $ref: '#/components/schemas/OverrideList'
          nullable: true
          example:
            object: list
            total_count: -1
            limit: -1
            page: -1
            next_page: null
            previous_page: null
            has_more: false
            data: []
        config_schemas:
          allOf:
            - $ref: '#/components/schemas/ConfigSchemaList'
          nullable: true
          example:
            object: list
            total_count: -1
            limit: -1
            page: -1
            next_page: null
            previous_page: null
            has_more: false
            data: []
    PolicyList:
      title: PolicyList
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Policy'
    Config:
      title: Config
      type: object
      required:
        - object
        - id
        - name
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - created_by
        - updated_by
        - schemas
        - policies
      properties:
        object:
          type: string
          enum:
            - config
          example: config
        id:
          type: string
          example: cfg_123
        name:
          type: string
          example: My Config
        created_at:
          type: string
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        schemas:
          allOf:
            - $ref: '#/components/schemas/ConfigSchemaList'
          nullable: true
          example:
            object: list
            total_count: -1
            limit: -1
            page: -1
            next_page: null
            previous_page: null
            has_more: false
            data: []
        policies:
          allOf:
            - $ref: '#/components/schemas/PolicyList'
          nullable: true
          example:
            object: list
            total_count: -1
            limit: -1
            page: -1
            next_page: null
            previous_page: null
            has_more: false
            data: []
    List:
      title: List
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum:
            - list
          example: list
    TagTypeField:
      title: Tag Type Field
      type: object
      required:
        - object
        - id
        - field
        - name
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - created_by
        - updated_by
        - tag_type
      properties:
        object:
          type: string
          enum:
            - tag_type_field
          example: tag_type_field
        id:
          type: string
          example: tag_type_field_123
        field:
          type: string
          example: device_id
        name:
          type: string
          example: Customer
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        tag_type:
          allOf:
            - $ref: '#/components/schemas/TagType'
          nullable: true
          example: null
    OverrideKeyValuePairs:
      title: OverrideKeyValuePairs
      type: object
      required:
        - object
        - id
        - key
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - tag_type_field_id
        - created_by
        - updated_by
        - tag_type_field
      properties:
        object:
          type: string
          enum:
            - override_key_value_pair
          example: override_key_value_pair
        id:
          type: string
          example: ovrd_kvp_123
        key:
          type: string
          example: device_id
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: user_123
        updated_by_id:
          type: string
          example: user_123
        tag_type_field_id:
          type: string
          example: tag_type_field_123
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        tag_type_field:
          allOf:
            - $ref: '#/components/schemas/TagTypeField'
          nullable: true
    OverrideKeyValuePairList:
      title: OverrideKeyValuePairList
      type: object
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/OverrideKeyValuePairs'
    Override:
      title: Override
      type: object
      required:
        - object
        - id
        - name
        - hierarchy_position
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - key_value_pairs_id
        - created_by
        - updated_by
        - key_value_pairs
      properties:
        object:
          type: string
          enum:
            - override
          example: override
        id:
          type: string
          example: override_123
        name:
          type: string
          example: Customer Override
        hierarchy_position:
          type: integer
          example: 3
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: user_123
        updated_by_id:
          type: string
          example: user_123
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        key_value_pairs:
          $ref: '#/components/schemas/OverrideKeyValuePairList'
    OverrideList:
      title: OverrideList
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Override'
    GitCommit:
      title: Git Commit
      type: object
      required:
        - id
        - commit_sha
        - commit_message
        - branch
        - repository
        - origin
        - repo_filepath
        - url
        - created_at
        - updated_at
        - created_by_id
        - updated_by_id
        - created_by
        - updated_by
      properties:
        object:
          type: string
          enum:
            - git_commit
          example: git_commit
        id:
          type: string
          example: git_commit_123
        commit_sha:
          type: string
          example: '1234567890'
        commit_message:
          type: string
          example: Add basic motion configurations
        branch:
          type: string
          example: main
        repository:
          type: string
          example: user/repo
        origin:
          type: string
          example: git@github.com:user/repo.git
        repo_filepath:
          type: string
          example: /path/to/config.yaml
        url:
          type: string
          example: https://github.com/user/repo/blob/main/path/to/config.yaml
        created_at:
          type: string
          example: '2021-01-01T00:00:00Z'
        updated_at:
          type: string
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        updated_by_id:
          type: string
          example: usr_123
          nullable: true
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        updated_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
    GitCommitList:
      title: Git Commit List
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/GitCommit'
    ConcreteConfig:
      title: Concrete Config
      type: object
      required:
        - object
        - id
        - created_at
        - created_by_id
        - client_id
        - schema_id
        - created_by
        - client
        - schema
        - configuration
      properties:
        object:
          type: string
          enum:
            - concrete_config
          example: concrete_config
        id:
          type: string
          example: cncr_cfg_123
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        created_by_id:
          type: string
          example: usr_123
          nullable: true
        client_id:
          type: string
          example: cli_123
        schema_id:
          type: string
          example: cfg_sch_123
        created_by:
          allOf:
            - $ref: '#/components/schemas/User'
          nullable: true
          example: null
        client:
          allOf:
            - $ref: '#/components/schemas/Client'
          nullable: true
          example: null
        schema:
          allOf:
            - $ref: '#/components/schemas/ConfigSchema'
          nullable: true
          example: null
        configuration:
          type: object
          example:
            device_id: device_23jt0321p9123434gsdf
            speed: 100
          nullable: true
    ConcreteConfigList:
      title: Concrete Config List
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConcreteConfig'
    UpdateConfigRequest:
      title: UpdateConfigRequest
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: My Config
    ConfigList:
      title: ConfigList
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Config'
    CreateConfigRequest:
      title: CreateConfigRequest
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: My Config
    UpdateConfigSchemaRequest:
      title: UpdateConfigSchemaRequest
      type: object
      required:
        - name
        - policy_id
      properties:
        name:
          type: string
        policy_id:
          type: string
          example: policy_123
    CreateConfigSchemaRequest:
      title: Create Config Schema Request
      type: object
      required:
        - name
        - schema
        - git_commit
        - git_branch
        - git_origin
        - git_repository_filepath
      properties:
        name:
          type: string
          example: Robot 1
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
              speed:
                type: integer
                minimum: 1
                default: 10
            required:
              - device_id
              - speed
        git_commit:
          type: string
          example: '1234567890'
        git_branch:
          type: string
          example: main
        git_origin:
          type: string
          example: https://github.com/robot1/robot1.git
        git_repository_filepath:
          type: string
          example: robot1/robot1.json
    UpdateOverrideRequest:
      title: Update Override
      type: object
      properties:
        name:
          type: string
          description: The name of the override
        key_value_pairs:
          type: object
          description: The key value pairs to override
          properties:
            id:
              type: string
              example: ovrd_kvp_123
            key:
              type: string
              example: calibrations.offset.x
            tag_type_field_id:
              type: string
              example: tag_type_fld_123
    CreateOverrideRequest:
      title: Create Override
      type: object
      properties:
        name:
          type: string
          description: The name of the override
        key_value_pairs:
          type: object
          description: The key value pairs to override
          properties:
            id:
              type: string
              example: ovrd_kvp_123
            key:
              type: string
              example: calibrations.offset.x
            tag_type_field_id:
              type: string
              example: tag_type_fld_123
    UpdatePolicyRequest:
      title: Update Policy
      type: object
      properties:
        name:
          type: string
          description: The name of the policy
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
              speed:
                type: integer
                minimum: 1
                default: 10
            required:
              - device_id
              - speed
    CreatePolicyRequest:
      title: Create Policy
      type: object
      properties:
        name:
          type: string
          description: The name of the policy
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
              speed:
                type: integer
                minimum: 1
                default: 10
            required:
              - device_id
              - speed
        config_id:
          type: string
          example: cfg_123
    UpdateTagTypeRequest:
      title: Update Tag Type Request
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
          example: Customer
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
                tag_type_field_id: tag_type_field_123
              speed:
                type: integer
                minimum: 1
                default: 10
                tag_type_field_id: tag_type_field_456
            required:
              - device_id
              - speed
    TagTypeList:
      title: Tag Type List
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/TagType'
    CreateTagTypeRequest:
      title: Create Tag Type Request
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
          example: Customer
        schema:
          type: object
          example:
            $schema: https://json-schema.org/draft/2020-12/schema
            type: object
            properties:
              device_id:
                type: string
              speed:
                type: integer
                minimum: 1
                default: 10
            required:
              - device_id
              - speed
    UpdateTagRequest:
      title: Update Tag Request
      type: object
      required:
        - metadata
      properties:
        metadata:
          type: object
          example:
            device_id: device_123
            speed: 10
    CreateTagRequest:
      title: Create Tag Request
      type: object
      required:
        - name
        - metadata
      properties:
        name:
          type: string
          example: Apple
        metadata:
          type: object
          example:
            device_id: device_123
            speed: 10
    UpdateUserRequest:
      title: Update User Request
      type: object
      required:
        - first_name
        - last_name
        - use_case
        - onboarded
      properties:
        first_name:
          type: string
          example: Ben
        last_name:
          type: string
          example: Smidt
        use_case:
          type: string
          example: developer
        onboarded:
          type: boolean
          example: true
    UpdateWorkspaceRequest:
      title: Update Workspace Request
      type: object
      required:
        - name
        - billing_plan
      properties:
        name:
          type: string
          example: Acme, Inc.
        billing_plan:
          $ref: '#/components/schemas/BillingPlan'
