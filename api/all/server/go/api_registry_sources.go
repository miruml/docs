// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RegistrySourcesAPIController binds http requests to an api service and writes the service results to the http response
type RegistrySourcesAPIController struct {
	service RegistrySourcesAPIServicer
	errorHandler ErrorHandler
}

// RegistrySourcesAPIOption for how the controller is set up.
type RegistrySourcesAPIOption func(*RegistrySourcesAPIController)

// WithRegistrySourcesAPIErrorHandler inject ErrorHandler into controller
func WithRegistrySourcesAPIErrorHandler(h ErrorHandler) RegistrySourcesAPIOption {
	return func(c *RegistrySourcesAPIController) {
		c.errorHandler = h
	}
}

// NewRegistrySourcesAPIController creates a default api controller
func NewRegistrySourcesAPIController(s RegistrySourcesAPIServicer, opts ...RegistrySourcesAPIOption) *RegistrySourcesAPIController {
	controller := &RegistrySourcesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RegistrySourcesAPIController
func (c *RegistrySourcesAPIController) Routes() Routes {
	return Routes{
		"WorkspacesWorkspaceIdSourcesRegistriesGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/workspaces/{workspace_id}/sources/registries",
			c.WorkspacesWorkspaceIdSourcesRegistriesGet,
		},
		"WorkspacesWorkspaceIdSourcesRegistriesPost": Route{
			strings.ToUpper("Post"),
			"/internal/v1/workspaces/{workspace_id}/sources/registries",
			c.WorkspacesWorkspaceIdSourcesRegistriesPost,
		},
		"SourcesRegistriesRegistrySourceIdGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/sources/registries/{registry_source_id}",
			c.SourcesRegistriesRegistrySourceIdGet,
		},
		"SourcesRegistriesRegistrySourceIdPatch": Route{
			strings.ToUpper("Patch"),
			"/internal/v1/sources/registries/{registry_source_id}",
			c.SourcesRegistriesRegistrySourceIdPatch,
		},
		"SourcesRegistriesRegistrySourceIdComposeFileGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/sources/registries/{registry_source_id}/compose_file",
			c.SourcesRegistriesRegistrySourceIdComposeFileGet,
		},
	}
}

// WorkspacesWorkspaceIdSourcesRegistriesGet - 
func (c *RegistrySourcesAPIController) WorkspacesWorkspaceIdSourcesRegistriesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	workspaceIdParam := params["workspace_id"]
	if workspaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_id"}, nil)
		return
	}
	result, err := c.service.WorkspacesWorkspaceIdSourcesRegistriesGet(r.Context(), workspaceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// WorkspacesWorkspaceIdSourcesRegistriesPost - 
func (c *RegistrySourcesAPIController) WorkspacesWorkspaceIdSourcesRegistriesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	workspaceIdParam := params["workspace_id"]
	if workspaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_id"}, nil)
		return
	}
	createRegistrySourceParam := CreateRegistrySource{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createRegistrySourceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateRegistrySourceRequired(createRegistrySourceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateRegistrySourceConstraints(createRegistrySourceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.WorkspacesWorkspaceIdSourcesRegistriesPost(r.Context(), workspaceIdParam, createRegistrySourceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SourcesRegistriesRegistrySourceIdGet - 
func (c *RegistrySourcesAPIController) SourcesRegistriesRegistrySourceIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	registrySourceIdParam := params["registry_source_id"]
	if registrySourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registry_source_id"}, nil)
		return
	}
	result, err := c.service.SourcesRegistriesRegistrySourceIdGet(r.Context(), registrySourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SourcesRegistriesRegistrySourceIdPatch - 
func (c *RegistrySourcesAPIController) SourcesRegistriesRegistrySourceIdPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	registrySourceIdParam := params["registry_source_id"]
	if registrySourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registry_source_id"}, nil)
		return
	}
	updateRegistrySourceParam := UpdateRegistrySource{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateRegistrySourceParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateRegistrySourceRequired(updateRegistrySourceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateRegistrySourceConstraints(updateRegistrySourceParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SourcesRegistriesRegistrySourceIdPatch(r.Context(), registrySourceIdParam, updateRegistrySourceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SourcesRegistriesRegistrySourceIdComposeFileGet - 
func (c *RegistrySourcesAPIController) SourcesRegistriesRegistrySourceIdComposeFileGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	registrySourceIdParam := params["registry_source_id"]
	if registrySourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registry_source_id"}, nil)
		return
	}
	result, err := c.service.SourcesRegistriesRegistrySourceIdComposeFileGet(r.Context(), registrySourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
