// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GitHubSourcesAPIController binds http requests to an api service and writes the service results to the http response
type GitHubSourcesAPIController struct {
	service GitHubSourcesAPIServicer
	errorHandler ErrorHandler
}

// GitHubSourcesAPIOption for how the controller is set up.
type GitHubSourcesAPIOption func(*GitHubSourcesAPIController)

// WithGitHubSourcesAPIErrorHandler inject ErrorHandler into controller
func WithGitHubSourcesAPIErrorHandler(h ErrorHandler) GitHubSourcesAPIOption {
	return func(c *GitHubSourcesAPIController) {
		c.errorHandler = h
	}
}

// NewGitHubSourcesAPIController creates a default api controller
func NewGitHubSourcesAPIController(s GitHubSourcesAPIServicer, opts ...GitHubSourcesAPIOption) *GitHubSourcesAPIController {
	controller := &GitHubSourcesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GitHubSourcesAPIController
func (c *GitHubSourcesAPIController) Routes() Routes {
	return Routes{
		"SourcesGithubGithubSourceIdCommitsGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/sources/github/{github_source_id}/commits",
			c.SourcesGithubGithubSourceIdCommitsGet,
		},
	}
}

// SourcesGithubGithubSourceIdCommitsGet - 
func (c *GitHubSourcesAPIController) SourcesGithubGithubSourceIdCommitsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	workspaceIdParam := params["workspace_id"]
	if workspaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_id"}, nil)
		return
	}
	githubSourceIdParam := params["github_source_id"]
	if githubSourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"github_source_id"}, nil)
		return
	}
	result, err := c.service.SourcesGithubGithubSourceIdCommitsGet(r.Context(), workspaceIdParam, githubSourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
