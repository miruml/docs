// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DeploymentsAPIController binds http requests to an api service and writes the service results to the http response
type DeploymentsAPIController struct {
	service DeploymentsAPIServicer
	errorHandler ErrorHandler
}

// DeploymentsAPIOption for how the controller is set up.
type DeploymentsAPIOption func(*DeploymentsAPIController)

// WithDeploymentsAPIErrorHandler inject ErrorHandler into controller
func WithDeploymentsAPIErrorHandler(h ErrorHandler) DeploymentsAPIOption {
	return func(c *DeploymentsAPIController) {
		c.errorHandler = h
	}
}

// NewDeploymentsAPIController creates a default api controller
func NewDeploymentsAPIController(s DeploymentsAPIServicer, opts ...DeploymentsAPIOption) *DeploymentsAPIController {
	controller := &DeploymentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DeploymentsAPIController
func (c *DeploymentsAPIController) Routes() Routes {
	return Routes{
		"DeploymentsDeploymentIdGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/deployments/{deployment_id}",
			c.DeploymentsDeploymentIdGet,
		},
		"DevicesDeviceIdDeploymentsGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/devices/{device_id}/deployments",
			c.DevicesDeviceIdDeploymentsGet,
		},
		"WorkspacesWorkspaceIdDeployPost": Route{
			strings.ToUpper("Post"),
			"/internal/v1/workspaces/{workspace_id}/deploy",
			c.WorkspacesWorkspaceIdDeployPost,
		},
		"DeploymentsDeploymentIdLogsGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/deployments/{deployment_id}/logs",
			c.DeploymentsDeploymentIdLogsGet,
		},
	}
}

// DeploymentsDeploymentIdGet - 
func (c *DeploymentsAPIController) DeploymentsDeploymentIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deployment_id"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deployment_id"}, nil)
		return
	}
	result, err := c.service.DeploymentsDeploymentIdGet(r.Context(), deploymentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DevicesDeviceIdDeploymentsGet - 
func (c *DeploymentsAPIController) DevicesDeviceIdDeploymentsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	deviceIdParam := params["device_id"]
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	var onDeviceParam bool
	if query.Has("on_device") {
		param, err := parseBoolParameter(
			query.Get("on_device"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "on_device", Err: err}, nil)
			return
		}

		onDeviceParam = param
	} else {
	}
	result, err := c.service.DevicesDeviceIdDeploymentsGet(r.Context(), deviceIdParam, onDeviceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// WorkspacesWorkspaceIdDeployPost - 
func (c *DeploymentsAPIController) WorkspacesWorkspaceIdDeployPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	workspaceIdParam := params["workspace_id"]
	if workspaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_id"}, nil)
		return
	}
	createDeploymentsParam := CreateDeployments{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createDeploymentsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateDeploymentsRequired(createDeploymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateDeploymentsConstraints(createDeploymentsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.WorkspacesWorkspaceIdDeployPost(r.Context(), workspaceIdParam, createDeploymentsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeploymentsDeploymentIdLogsGet - 
func (c *DeploymentsAPIController) DeploymentsDeploymentIdLogsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deploymentIdParam := params["deployment_id"]
	if deploymentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"deployment_id"}, nil)
		return
	}
	result, err := c.service.DeploymentsDeploymentIdLogsGet(r.Context(), deploymentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
