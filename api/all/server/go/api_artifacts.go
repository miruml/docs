// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ArtifactsAPIController binds http requests to an api service and writes the service results to the http response
type ArtifactsAPIController struct {
	service ArtifactsAPIServicer
	errorHandler ErrorHandler
}

// ArtifactsAPIOption for how the controller is set up.
type ArtifactsAPIOption func(*ArtifactsAPIController)

// WithArtifactsAPIErrorHandler inject ErrorHandler into controller
func WithArtifactsAPIErrorHandler(h ErrorHandler) ArtifactsAPIOption {
	return func(c *ArtifactsAPIController) {
		c.errorHandler = h
	}
}

// NewArtifactsAPIController creates a default api controller
func NewArtifactsAPIController(s ArtifactsAPIServicer, opts ...ArtifactsAPIOption) *ArtifactsAPIController {
	controller := &ArtifactsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ArtifactsAPIController
func (c *ArtifactsAPIController) Routes() Routes {
	return Routes{
		"ArtifactsArtifactIdGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/artifacts/{artifact_id}",
			c.ArtifactsArtifactIdGet,
		},
		"ArtifactsArtifactIdComposeFileGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/artifacts/{artifact_id}/compose_file",
			c.ArtifactsArtifactIdComposeFileGet,
		},
		"SourcesRegistriesRegistrySourceIdArtifactsPost": Route{
			strings.ToUpper("Post"),
			"/internal/v1/sources/registries/{registry_source_id}/artifacts",
			c.SourcesRegistriesRegistrySourceIdArtifactsPost,
		},
		"SourcesGithubGithubSourceIdArtifactsPost": Route{
			strings.ToUpper("Post"),
			"/internal/v1/sources/github/{github_source_id}/artifacts",
			c.SourcesGithubGithubSourceIdArtifactsPost,
		},
	}
}

// ArtifactsArtifactIdGet - 
func (c *ArtifactsAPIController) ArtifactsArtifactIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	artifactIdParam := params["artifact_id"]
	if artifactIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"artifact_id"}, nil)
		return
	}
	result, err := c.service.ArtifactsArtifactIdGet(r.Context(), artifactIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArtifactsArtifactIdComposeFileGet - 
func (c *ArtifactsAPIController) ArtifactsArtifactIdComposeFileGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	artifactIdParam := params["artifact_id"]
	if artifactIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"artifact_id"}, nil)
		return
	}
	result, err := c.service.ArtifactsArtifactIdComposeFileGet(r.Context(), artifactIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SourcesRegistriesRegistrySourceIdArtifactsPost - 
func (c *ArtifactsAPIController) SourcesRegistriesRegistrySourceIdArtifactsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	registrySourceIdParam := params["registry_source_id"]
	if registrySourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"registry_source_id"}, nil)
		return
	}
	createRegistrySourceArtifactParam := CreateRegistrySourceArtifact{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createRegistrySourceArtifactParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateRegistrySourceArtifactRequired(createRegistrySourceArtifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateRegistrySourceArtifactConstraints(createRegistrySourceArtifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SourcesRegistriesRegistrySourceIdArtifactsPost(r.Context(), registrySourceIdParam, createRegistrySourceArtifactParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SourcesGithubGithubSourceIdArtifactsPost - 
func (c *ArtifactsAPIController) SourcesGithubGithubSourceIdArtifactsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	githubSourceIdParam := params["github_source_id"]
	if githubSourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"github_source_id"}, nil)
		return
	}
	createGitHubSourceArtifactParam := CreateGitHubSourceArtifact{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createGitHubSourceArtifactParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateGitHubSourceArtifactRequired(createGitHubSourceArtifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateGitHubSourceArtifactConstraints(createGitHubSourceArtifactParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SourcesGithubGithubSourceIdArtifactsPost(r.Context(), githubSourceIdParam, createGitHubSourceArtifactParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
