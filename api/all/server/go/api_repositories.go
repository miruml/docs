// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RepositoriesAPIController binds http requests to an api service and writes the service results to the http response
type RepositoriesAPIController struct {
	service RepositoriesAPIServicer
	errorHandler ErrorHandler
}

// RepositoriesAPIOption for how the controller is set up.
type RepositoriesAPIOption func(*RepositoriesAPIController)

// WithRepositoriesAPIErrorHandler inject ErrorHandler into controller
func WithRepositoriesAPIErrorHandler(h ErrorHandler) RepositoriesAPIOption {
	return func(c *RepositoriesAPIController) {
		c.errorHandler = h
	}
}

// NewRepositoriesAPIController creates a default api controller
func NewRepositoriesAPIController(s RepositoriesAPIServicer, opts ...RepositoriesAPIOption) *RepositoriesAPIController {
	controller := &RepositoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RepositoriesAPIController
func (c *RepositoriesAPIController) Routes() Routes {
	return Routes{
		"IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/integrations/dockerhub/{dockerhub_integration_id}/repositories/external",
			c.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet,
		},
		"IntegrationsGarGarIntegrationIdRepositoriesExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/integrations/gar/{gar_integration_id}/repositories/external",
			c.IntegrationsGarGarIntegrationIdRepositoriesExternalGet,
		},
		"WorkspacesWorkspaceIdRepositoriesExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/workspaces/{workspace_id}/repositories/external",
			c.WorkspacesWorkspaceIdRepositoriesExternalGet,
		},
		"RepositoriesRepositoryIdGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/repositories/{repository_id}",
			c.RepositoriesRepositoryIdGet,
		},
		"RepositoriesRepositoryIdImagesExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/repositories/{repository_id}/images/external",
			c.RepositoriesRepositoryIdImagesExternalGet,
		},
	}
}

// IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet - 
func (c *RepositoriesAPIController) IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dockerhubIntegrationIdParam := params["dockerhub_integration_id"]
	if dockerhubIntegrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dockerhub_integration_id"}, nil)
		return
	}
	result, err := c.service.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(r.Context(), dockerhubIntegrationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// IntegrationsGarGarIntegrationIdRepositoriesExternalGet - 
func (c *RepositoriesAPIController) IntegrationsGarGarIntegrationIdRepositoriesExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	garIntegrationIdParam := params["gar_integration_id"]
	if garIntegrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"gar_integration_id"}, nil)
		return
	}
	result, err := c.service.IntegrationsGarGarIntegrationIdRepositoriesExternalGet(r.Context(), garIntegrationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// WorkspacesWorkspaceIdRepositoriesExternalGet - 
func (c *RepositoriesAPIController) WorkspacesWorkspaceIdRepositoriesExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	workspaceIdParam := params["workspace_id"]
	if workspaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_id"}, nil)
		return
	}
	result, err := c.service.WorkspacesWorkspaceIdRepositoriesExternalGet(r.Context(), workspaceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RepositoriesRepositoryIdGet - 
func (c *RepositoriesAPIController) RepositoriesRepositoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	repositoryIdParam := params["repository_id"]
	if repositoryIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"repository_id"}, nil)
		return
	}
	result, err := c.service.RepositoriesRepositoryIdGet(r.Context(), repositoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// RepositoriesRepositoryIdImagesExternalGet - 
func (c *RepositoriesAPIController) RepositoriesRepositoryIdImagesExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	repositoryIdParam := params["repository_id"]
	if repositoryIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"repository_id"}, nil)
		return
	}
	result, err := c.service.RepositoriesRepositoryIdImagesExternalGet(r.Context(), repositoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
