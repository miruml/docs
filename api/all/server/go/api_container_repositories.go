// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContainerRepositoriesAPIController binds http requests to an api service and writes the service results to the http response
type ContainerRepositoriesAPIController struct {
	service ContainerRepositoriesAPIServicer
	errorHandler ErrorHandler
}

// ContainerRepositoriesAPIOption for how the controller is set up.
type ContainerRepositoriesAPIOption func(*ContainerRepositoriesAPIController)

// WithContainerRepositoriesAPIErrorHandler inject ErrorHandler into controller
func WithContainerRepositoriesAPIErrorHandler(h ErrorHandler) ContainerRepositoriesAPIOption {
	return func(c *ContainerRepositoriesAPIController) {
		c.errorHandler = h
	}
}

// NewContainerRepositoriesAPIController creates a default api controller
func NewContainerRepositoriesAPIController(s ContainerRepositoriesAPIServicer, opts ...ContainerRepositoriesAPIOption) *ContainerRepositoriesAPIController {
	controller := &ContainerRepositoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContainerRepositoriesAPIController
func (c *ContainerRepositoriesAPIController) Routes() Routes {
	return Routes{
		"RepositoriesContainerContainerRepositoryIdGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/repositories/container/{container_repository_id}",
			c.RepositoriesContainerContainerRepositoryIdGet,
		},
		"IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/integrations/dockerhub/{dockerhub_integration_id}/repositories/external",
			c.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet,
		},
		"IntegrationsGarGarIntegrationIdRepositoriesExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/integrations/gar/{gar_integration_id}/repositories/external",
			c.IntegrationsGarGarIntegrationIdRepositoriesExternalGet,
		},
		"WorkspacesWorkspaceIdRepositoriesContainerExternalGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/workspaces/{workspace_id}/repositories/container/external",
			c.WorkspacesWorkspaceIdRepositoriesContainerExternalGet,
		},
	}
}

// RepositoriesContainerContainerRepositoryIdGet - 
func (c *ContainerRepositoriesAPIController) RepositoriesContainerContainerRepositoryIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	containerRepositoryIdParam := params["container_repository_id"]
	if containerRepositoryIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"container_repository_id"}, nil)
		return
	}
	result, err := c.service.RepositoriesContainerContainerRepositoryIdGet(r.Context(), containerRepositoryIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet - 
func (c *ContainerRepositoriesAPIController) IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	dockerhubIntegrationIdParam := params["dockerhub_integration_id"]
	if dockerhubIntegrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dockerhub_integration_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(r.Context(), dockerhubIntegrationIdParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// IntegrationsGarGarIntegrationIdRepositoriesExternalGet - 
func (c *ContainerRepositoriesAPIController) IntegrationsGarGarIntegrationIdRepositoriesExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	garIntegrationIdParam := params["gar_integration_id"]
	if garIntegrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"gar_integration_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.IntegrationsGarGarIntegrationIdRepositoriesExternalGet(r.Context(), garIntegrationIdParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// WorkspacesWorkspaceIdRepositoriesContainerExternalGet - 
func (c *ContainerRepositoriesAPIController) WorkspacesWorkspaceIdRepositoriesContainerExternalGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	workspaceIdParam := params["workspace_id"]
	if workspaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_id"}, nil)
		return
	}
	var pageSizeParam int32
	if query.Has("page_size") {
		param, err := parseNumericParameter[int32](
			query.Get("page_size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page_size", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
		var param int32 = 25
		pageSizeParam = param
	}
	result, err := c.service.WorkspacesWorkspaceIdRepositoriesContainerExternalGet(r.Context(), workspaceIdParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
