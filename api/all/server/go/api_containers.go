// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContainersAPIController binds http requests to an api service and writes the service results to the http response
type ContainersAPIController struct {
	service ContainersAPIServicer
	errorHandler ErrorHandler
}

// ContainersAPIOption for how the controller is set up.
type ContainersAPIOption func(*ContainersAPIController)

// WithContainersAPIErrorHandler inject ErrorHandler into controller
func WithContainersAPIErrorHandler(h ErrorHandler) ContainersAPIOption {
	return func(c *ContainersAPIController) {
		c.errorHandler = h
	}
}

// NewContainersAPIController creates a default api controller
func NewContainersAPIController(s ContainersAPIServicer, opts ...ContainersAPIOption) *ContainersAPIController {
	controller := &ContainersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContainersAPIController
func (c *ContainersAPIController) Routes() Routes {
	return Routes{
		"DevicesDeviceIdContainersGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/devices/{device_id}/containers",
			c.DevicesDeviceIdContainersGet,
		},
	}
}

// DevicesDeviceIdContainersGet - 
func (c *ContainersAPIController) DevicesDeviceIdContainersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	deviceIdParam := params["device_id"]
	if deviceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"device_id"}, nil)
		return
	}
	result, err := c.service.DevicesDeviceIdContainersGet(r.Context(), deviceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
