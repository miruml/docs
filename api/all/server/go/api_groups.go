// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GroupsAPIController binds http requests to an api service and writes the service results to the http response
type GroupsAPIController struct {
	service GroupsAPIServicer
	errorHandler ErrorHandler
}

// GroupsAPIOption for how the controller is set up.
type GroupsAPIOption func(*GroupsAPIController)

// WithGroupsAPIErrorHandler inject ErrorHandler into controller
func WithGroupsAPIErrorHandler(h ErrorHandler) GroupsAPIOption {
	return func(c *GroupsAPIController) {
		c.errorHandler = h
	}
}

// NewGroupsAPIController creates a default api controller
func NewGroupsAPIController(s GroupsAPIServicer, opts ...GroupsAPIOption) *GroupsAPIController {
	controller := &GroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GroupsAPIController
func (c *GroupsAPIController) Routes() Routes {
	return Routes{
		"GroupsGroupIdGet": Route{
			strings.ToUpper("Get"),
			"/internal/v1/groups/{group_id}",
			c.GroupsGroupIdGet,
		},
	}
}

// GroupsGroupIdGet - 
func (c *GroupsAPIController) GroupsGroupIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	groupIdParam := params["group_id"]
	if groupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_id"}, nil)
		return
	}
	result, err := c.service.GroupsGroupIdGet(r.Context(), groupIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
