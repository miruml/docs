/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArtifactDeploymentFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactDeploymentFiles{}

// ArtifactDeploymentFiles struct for ArtifactDeploymentFiles
type ArtifactDeploymentFiles struct {
	Object string `json:"object"`
	ComposeFile string `json:"compose_file"`
	EnvFile NullableString `json:"env_file"`
}

type _ArtifactDeploymentFiles ArtifactDeploymentFiles

// NewArtifactDeploymentFiles instantiates a new ArtifactDeploymentFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactDeploymentFiles(object string, composeFile string, envFile NullableString) *ArtifactDeploymentFiles {
	this := ArtifactDeploymentFiles{}
	this.Object = object
	this.ComposeFile = composeFile
	this.EnvFile = envFile
	return &this
}

// NewArtifactDeploymentFilesWithDefaults instantiates a new ArtifactDeploymentFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactDeploymentFilesWithDefaults() *ArtifactDeploymentFiles {
	this := ArtifactDeploymentFiles{}
	return &this
}

// GetObject returns the Object field value
func (o *ArtifactDeploymentFiles) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ArtifactDeploymentFiles) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ArtifactDeploymentFiles) SetObject(v string) {
	o.Object = v
}

// GetComposeFile returns the ComposeFile field value
func (o *ArtifactDeploymentFiles) GetComposeFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComposeFile
}

// GetComposeFileOk returns a tuple with the ComposeFile field value
// and a boolean to check if the value has been set.
func (o *ArtifactDeploymentFiles) GetComposeFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComposeFile, true
}

// SetComposeFile sets field value
func (o *ArtifactDeploymentFiles) SetComposeFile(v string) {
	o.ComposeFile = v
}

// GetEnvFile returns the EnvFile field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArtifactDeploymentFiles) GetEnvFile() string {
	if o == nil || o.EnvFile.Get() == nil {
		var ret string
		return ret
	}

	return *o.EnvFile.Get()
}

// GetEnvFileOk returns a tuple with the EnvFile field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtifactDeploymentFiles) GetEnvFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvFile.Get(), o.EnvFile.IsSet()
}

// SetEnvFile sets field value
func (o *ArtifactDeploymentFiles) SetEnvFile(v string) {
	o.EnvFile.Set(&v)
}

func (o ArtifactDeploymentFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactDeploymentFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["compose_file"] = o.ComposeFile
	toSerialize["env_file"] = o.EnvFile.Get()
	return toSerialize, nil
}

func (o *ArtifactDeploymentFiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"compose_file",
		"env_file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactDeploymentFiles := _ArtifactDeploymentFiles{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactDeploymentFiles)

	if err != nil {
		return err
	}

	*o = ArtifactDeploymentFiles(varArtifactDeploymentFiles)

	return err
}

type NullableArtifactDeploymentFiles struct {
	value *ArtifactDeploymentFiles
	isSet bool
}

func (v NullableArtifactDeploymentFiles) Get() *ArtifactDeploymentFiles {
	return v.value
}

func (v *NullableArtifactDeploymentFiles) Set(val *ArtifactDeploymentFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactDeploymentFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactDeploymentFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactDeploymentFiles(val *ArtifactDeploymentFiles) *NullableArtifactDeploymentFiles {
	return &NullableArtifactDeploymentFiles{value: val, isSet: true}
}

func (v NullableArtifactDeploymentFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactDeploymentFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


