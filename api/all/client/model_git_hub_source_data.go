/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GitHubSourceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitHubSourceData{}

// GitHubSourceData struct for GitHubSourceData
type GitHubSourceData struct {
	Sender GitHubSourceDataSender `json:"sender"`
	Branch string `json:"branch"`
	BuildPath string `json:"build_path"`
	Repository GitHubSourceDataRepository `json:"repository"`
	HeadCommit GitHubSourceDataHeadCommit `json:"head_commit"`
}

type _GitHubSourceData GitHubSourceData

// NewGitHubSourceData instantiates a new GitHubSourceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitHubSourceData(sender GitHubSourceDataSender, branch string, buildPath string, repository GitHubSourceDataRepository, headCommit GitHubSourceDataHeadCommit) *GitHubSourceData {
	this := GitHubSourceData{}
	this.Sender = sender
	this.Branch = branch
	this.BuildPath = buildPath
	this.Repository = repository
	this.HeadCommit = headCommit
	return &this
}

// NewGitHubSourceDataWithDefaults instantiates a new GitHubSourceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitHubSourceDataWithDefaults() *GitHubSourceData {
	this := GitHubSourceData{}
	return &this
}

// GetSender returns the Sender field value
func (o *GitHubSourceData) GetSender() GitHubSourceDataSender {
	if o == nil {
		var ret GitHubSourceDataSender
		return ret
	}

	return o.Sender
}

// GetSenderOk returns a tuple with the Sender field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceData) GetSenderOk() (*GitHubSourceDataSender, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sender, true
}

// SetSender sets field value
func (o *GitHubSourceData) SetSender(v GitHubSourceDataSender) {
	o.Sender = v
}

// GetBranch returns the Branch field value
func (o *GitHubSourceData) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceData) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *GitHubSourceData) SetBranch(v string) {
	o.Branch = v
}

// GetBuildPath returns the BuildPath field value
func (o *GitHubSourceData) GetBuildPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildPath
}

// GetBuildPathOk returns a tuple with the BuildPath field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceData) GetBuildPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildPath, true
}

// SetBuildPath sets field value
func (o *GitHubSourceData) SetBuildPath(v string) {
	o.BuildPath = v
}

// GetRepository returns the Repository field value
func (o *GitHubSourceData) GetRepository() GitHubSourceDataRepository {
	if o == nil {
		var ret GitHubSourceDataRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceData) GetRepositoryOk() (*GitHubSourceDataRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *GitHubSourceData) SetRepository(v GitHubSourceDataRepository) {
	o.Repository = v
}

// GetHeadCommit returns the HeadCommit field value
func (o *GitHubSourceData) GetHeadCommit() GitHubSourceDataHeadCommit {
	if o == nil {
		var ret GitHubSourceDataHeadCommit
		return ret
	}

	return o.HeadCommit
}

// GetHeadCommitOk returns a tuple with the HeadCommit field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceData) GetHeadCommitOk() (*GitHubSourceDataHeadCommit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeadCommit, true
}

// SetHeadCommit sets field value
func (o *GitHubSourceData) SetHeadCommit(v GitHubSourceDataHeadCommit) {
	o.HeadCommit = v
}

func (o GitHubSourceData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitHubSourceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sender"] = o.Sender
	toSerialize["branch"] = o.Branch
	toSerialize["build_path"] = o.BuildPath
	toSerialize["repository"] = o.Repository
	toSerialize["head_commit"] = o.HeadCommit
	return toSerialize, nil
}

func (o *GitHubSourceData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sender",
		"branch",
		"build_path",
		"repository",
		"head_commit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitHubSourceData := _GitHubSourceData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitHubSourceData)

	if err != nil {
		return err
	}

	*o = GitHubSourceData(varGitHubSourceData)

	return err
}

type NullableGitHubSourceData struct {
	value *GitHubSourceData
	isSet bool
}

func (v NullableGitHubSourceData) Get() *GitHubSourceData {
	return v.value
}

func (v *NullableGitHubSourceData) Set(val *GitHubSourceData) {
	v.value = val
	v.isSet = true
}

func (v NullableGitHubSourceData) IsSet() bool {
	return v.isSet
}

func (v *NullableGitHubSourceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitHubSourceData(val *GitHubSourceData) *NullableGitHubSourceData {
	return &NullableGitHubSourceData{value: val, isSet: true}
}

func (v NullableGitHubSourceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitHubSourceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


