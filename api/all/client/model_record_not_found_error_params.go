/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RecordNotFoundErrorParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordNotFoundErrorParams{}

// RecordNotFoundErrorParams struct for RecordNotFoundErrorParams
type RecordNotFoundErrorParams struct {
	RecordId *string `json:"record_id,omitempty"`
	RecordType *string `json:"record_type,omitempty"`
}

// NewRecordNotFoundErrorParams instantiates a new RecordNotFoundErrorParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordNotFoundErrorParams() *RecordNotFoundErrorParams {
	this := RecordNotFoundErrorParams{}
	return &this
}

// NewRecordNotFoundErrorParamsWithDefaults instantiates a new RecordNotFoundErrorParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordNotFoundErrorParamsWithDefaults() *RecordNotFoundErrorParams {
	this := RecordNotFoundErrorParams{}
	return &this
}

// GetRecordId returns the RecordId field value if set, zero value otherwise.
func (o *RecordNotFoundErrorParams) GetRecordId() string {
	if o == nil || IsNil(o.RecordId) {
		var ret string
		return ret
	}
	return *o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNotFoundErrorParams) GetRecordIdOk() (*string, bool) {
	if o == nil || IsNil(o.RecordId) {
		return nil, false
	}
	return o.RecordId, true
}

// HasRecordId returns a boolean if a field has been set.
func (o *RecordNotFoundErrorParams) HasRecordId() bool {
	if o != nil && !IsNil(o.RecordId) {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given string and assigns it to the RecordId field.
func (o *RecordNotFoundErrorParams) SetRecordId(v string) {
	o.RecordId = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *RecordNotFoundErrorParams) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordNotFoundErrorParams) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *RecordNotFoundErrorParams) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *RecordNotFoundErrorParams) SetRecordType(v string) {
	o.RecordType = &v
}

func (o RecordNotFoundErrorParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordNotFoundErrorParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RecordId) {
		toSerialize["record_id"] = o.RecordId
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullableRecordNotFoundErrorParams struct {
	value *RecordNotFoundErrorParams
	isSet bool
}

func (v NullableRecordNotFoundErrorParams) Get() *RecordNotFoundErrorParams {
	return v.value
}

func (v *NullableRecordNotFoundErrorParams) Set(val *RecordNotFoundErrorParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordNotFoundErrorParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordNotFoundErrorParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordNotFoundErrorParams(val *RecordNotFoundErrorParams) *NullableRecordNotFoundErrorParams {
	return &NullableRecordNotFoundErrorParams{value: val, isSet: true}
}

func (v NullableRecordNotFoundErrorParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordNotFoundErrorParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


