/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GitHubSourcesAPIService GitHubSourcesAPI service
type GitHubSourcesAPIService service

type ApiSourcesGithubGithubSourceIdCommitsGetRequest struct {
	ctx context.Context
	ApiService *GitHubSourcesAPIService
	workspaceId string
	githubSourceId string
}

func (r ApiSourcesGithubGithubSourceIdCommitsGetRequest) Execute() (*GitHubSourceCommits, *http.Response, error) {
	return r.ApiService.SourcesGithubGithubSourceIdCommitsGetExecute(r)
}

/*
SourcesGithubGithubSourceIdCommitsGet Method for SourcesGithubGithubSourceIdCommitsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspaceId The unique identifier of the workspace
 @param githubSourceId The unique identifier of the github source
 @return ApiSourcesGithubGithubSourceIdCommitsGetRequest
*/
func (a *GitHubSourcesAPIService) SourcesGithubGithubSourceIdCommitsGet(ctx context.Context, workspaceId string, githubSourceId string) ApiSourcesGithubGithubSourceIdCommitsGetRequest {
	return ApiSourcesGithubGithubSourceIdCommitsGetRequest{
		ApiService: a,
		ctx: ctx,
		workspaceId: workspaceId,
		githubSourceId: githubSourceId,
	}
}

// Execute executes the request
//  @return GitHubSourceCommits
func (a *GitHubSourcesAPIService) SourcesGithubGithubSourceIdCommitsGetExecute(r ApiSourcesGithubGithubSourceIdCommitsGetRequest) (*GitHubSourceCommits, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitHubSourceCommits
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GitHubSourcesAPIService.SourcesGithubGithubSourceIdCommitsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sources/github/{github_source_id}/commits"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_id"+"}", url.PathEscape(parameterValueToString(r.workspaceId, "workspaceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"github_source_id"+"}", url.PathEscape(parameterValueToString(r.githubSourceId, "githubSourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
