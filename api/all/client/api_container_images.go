/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContainerImagesAPIService ContainerImagesAPI service
type ContainerImagesAPIService service

type ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest struct {
	ctx context.Context
	ApiService *ContainerImagesAPIService
	containerRepositoryId string
	pageSize *int32
}

// The number of items to return per page
func (r ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest) PageSize(pageSize int32) ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest) Execute() (*ExternalContainerImageList, *http.Response, error) {
	return r.ApiService.RepositoriesContainerContainerRepositoryIdImagesExternalGetExecute(r)
}

/*
RepositoriesContainerContainerRepositoryIdImagesExternalGet Method for RepositoriesContainerContainerRepositoryIdImagesExternalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param containerRepositoryId The unique identifier of the container repository
 @return ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest
*/
func (a *ContainerImagesAPIService) RepositoriesContainerContainerRepositoryIdImagesExternalGet(ctx context.Context, containerRepositoryId string) ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest {
	return ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest{
		ApiService: a,
		ctx: ctx,
		containerRepositoryId: containerRepositoryId,
	}
}

// Execute executes the request
//  @return ExternalContainerImageList
func (a *ContainerImagesAPIService) RepositoriesContainerContainerRepositoryIdImagesExternalGetExecute(r ApiRepositoriesContainerContainerRepositoryIdImagesExternalGetRequest) (*ExternalContainerImageList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalContainerImageList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContainerImagesAPIService.RepositoriesContainerContainerRepositoryIdImagesExternalGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/container/{container_repository_id}/images/external"
	localVarPath = strings.Replace(localVarPath, "{"+"container_repository_id"+"}", url.PathEscape(parameterValueToString(r.containerRepositoryId, "containerRepositoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "", "")
	} else {
		var defaultValue int32 = 25
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
