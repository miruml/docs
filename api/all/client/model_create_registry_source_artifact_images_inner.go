/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRegistrySourceArtifactImagesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRegistrySourceArtifactImagesInner{}

// CreateRegistrySourceArtifactImagesInner struct for CreateRegistrySourceArtifactImagesInner
type CreateRegistrySourceArtifactImagesInner struct {
	RepoId string `json:"repo_id"`
	Tag string `json:"tag"`
}

type _CreateRegistrySourceArtifactImagesInner CreateRegistrySourceArtifactImagesInner

// NewCreateRegistrySourceArtifactImagesInner instantiates a new CreateRegistrySourceArtifactImagesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRegistrySourceArtifactImagesInner(repoId string, tag string) *CreateRegistrySourceArtifactImagesInner {
	this := CreateRegistrySourceArtifactImagesInner{}
	this.RepoId = repoId
	this.Tag = tag
	return &this
}

// NewCreateRegistrySourceArtifactImagesInnerWithDefaults instantiates a new CreateRegistrySourceArtifactImagesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRegistrySourceArtifactImagesInnerWithDefaults() *CreateRegistrySourceArtifactImagesInner {
	this := CreateRegistrySourceArtifactImagesInner{}
	return &this
}

// GetRepoId returns the RepoId field value
func (o *CreateRegistrySourceArtifactImagesInner) GetRepoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepoId
}

// GetRepoIdOk returns a tuple with the RepoId field value
// and a boolean to check if the value has been set.
func (o *CreateRegistrySourceArtifactImagesInner) GetRepoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoId, true
}

// SetRepoId sets field value
func (o *CreateRegistrySourceArtifactImagesInner) SetRepoId(v string) {
	o.RepoId = v
}

// GetTag returns the Tag field value
func (o *CreateRegistrySourceArtifactImagesInner) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *CreateRegistrySourceArtifactImagesInner) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *CreateRegistrySourceArtifactImagesInner) SetTag(v string) {
	o.Tag = v
}

func (o CreateRegistrySourceArtifactImagesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRegistrySourceArtifactImagesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["repo_id"] = o.RepoId
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *CreateRegistrySourceArtifactImagesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repo_id",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRegistrySourceArtifactImagesInner := _CreateRegistrySourceArtifactImagesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRegistrySourceArtifactImagesInner)

	if err != nil {
		return err
	}

	*o = CreateRegistrySourceArtifactImagesInner(varCreateRegistrySourceArtifactImagesInner)

	return err
}

type NullableCreateRegistrySourceArtifactImagesInner struct {
	value *CreateRegistrySourceArtifactImagesInner
	isSet bool
}

func (v NullableCreateRegistrySourceArtifactImagesInner) Get() *CreateRegistrySourceArtifactImagesInner {
	return v.value
}

func (v *NullableCreateRegistrySourceArtifactImagesInner) Set(val *CreateRegistrySourceArtifactImagesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRegistrySourceArtifactImagesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRegistrySourceArtifactImagesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRegistrySourceArtifactImagesInner(val *CreateRegistrySourceArtifactImagesInner) *NullableCreateRegistrySourceArtifactImagesInner {
	return &NullableCreateRegistrySourceArtifactImagesInner{value: val, isSet: true}
}

func (v NullableCreateRegistrySourceArtifactImagesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRegistrySourceArtifactImagesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


