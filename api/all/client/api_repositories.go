/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RepositoriesAPIService RepositoriesAPI service
type RepositoriesAPIService service

type ApiIntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetRequest struct {
	ctx context.Context
	ApiService *RepositoriesAPIService
	dockerhubIntegrationId string
}

func (r ApiIntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetRequest) Execute() (*ExternalRepositoryList, *http.Response, error) {
	return r.ApiService.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetExecute(r)
}

/*
IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet Method for IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dockerhubIntegrationId The unique identifier of the dockerhub integration
 @return ApiIntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetRequest
*/
func (a *RepositoriesAPIService) IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(ctx context.Context, dockerhubIntegrationId string) ApiIntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetRequest {
	return ApiIntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetRequest{
		ApiService: a,
		ctx: ctx,
		dockerhubIntegrationId: dockerhubIntegrationId,
	}
}

// Execute executes the request
//  @return ExternalRepositoryList
func (a *RepositoriesAPIService) IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetExecute(r ApiIntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGetRequest) (*ExternalRepositoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalRepositoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAPIService.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/dockerhub/{dockerhub_integration_id}/repositories/external"
	localVarPath = strings.Replace(localVarPath, "{"+"dockerhub_integration_id"+"}", url.PathEscape(parameterValueToString(r.dockerhubIntegrationId, "dockerhubIntegrationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIntegrationsGarGarIntegrationIdRepositoriesExternalGetRequest struct {
	ctx context.Context
	ApiService *RepositoriesAPIService
	garIntegrationId string
}

func (r ApiIntegrationsGarGarIntegrationIdRepositoriesExternalGetRequest) Execute() (*ExternalRepositoryList, *http.Response, error) {
	return r.ApiService.IntegrationsGarGarIntegrationIdRepositoriesExternalGetExecute(r)
}

/*
IntegrationsGarGarIntegrationIdRepositoriesExternalGet Method for IntegrationsGarGarIntegrationIdRepositoriesExternalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param garIntegrationId The unique identifier of the google artifact registry integration
 @return ApiIntegrationsGarGarIntegrationIdRepositoriesExternalGetRequest
*/
func (a *RepositoriesAPIService) IntegrationsGarGarIntegrationIdRepositoriesExternalGet(ctx context.Context, garIntegrationId string) ApiIntegrationsGarGarIntegrationIdRepositoriesExternalGetRequest {
	return ApiIntegrationsGarGarIntegrationIdRepositoriesExternalGetRequest{
		ApiService: a,
		ctx: ctx,
		garIntegrationId: garIntegrationId,
	}
}

// Execute executes the request
//  @return ExternalRepositoryList
func (a *RepositoriesAPIService) IntegrationsGarGarIntegrationIdRepositoriesExternalGetExecute(r ApiIntegrationsGarGarIntegrationIdRepositoriesExternalGetRequest) (*ExternalRepositoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalRepositoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAPIService.IntegrationsGarGarIntegrationIdRepositoriesExternalGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/integrations/gar/{gar_integration_id}/repositories/external"
	localVarPath = strings.Replace(localVarPath, "{"+"gar_integration_id"+"}", url.PathEscape(parameterValueToString(r.garIntegrationId, "garIntegrationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRepositoriesRepositoryIdGetRequest struct {
	ctx context.Context
	ApiService *RepositoriesAPIService
	repositoryId string
}

func (r ApiRepositoriesRepositoryIdGetRequest) Execute() (*Repository, *http.Response, error) {
	return r.ApiService.RepositoriesRepositoryIdGetExecute(r)
}

/*
RepositoriesRepositoryIdGet Method for RepositoriesRepositoryIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param repositoryId The unique identifier of the repository
 @return ApiRepositoriesRepositoryIdGetRequest
*/
func (a *RepositoriesAPIService) RepositoriesRepositoryIdGet(ctx context.Context, repositoryId string) ApiRepositoriesRepositoryIdGetRequest {
	return ApiRepositoriesRepositoryIdGetRequest{
		ApiService: a,
		ctx: ctx,
		repositoryId: repositoryId,
	}
}

// Execute executes the request
//  @return Repository
func (a *RepositoriesAPIService) RepositoriesRepositoryIdGetExecute(r ApiRepositoriesRepositoryIdGetRequest) (*Repository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Repository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAPIService.RepositoriesRepositoryIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{repository_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"repository_id"+"}", url.PathEscape(parameterValueToString(r.repositoryId, "repositoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRepositoriesRepositoryIdImagesExternalGetRequest struct {
	ctx context.Context
	ApiService *RepositoriesAPIService
	repositoryId string
}

func (r ApiRepositoriesRepositoryIdImagesExternalGetRequest) Execute() (*ExternalImageList, *http.Response, error) {
	return r.ApiService.RepositoriesRepositoryIdImagesExternalGetExecute(r)
}

/*
RepositoriesRepositoryIdImagesExternalGet Method for RepositoriesRepositoryIdImagesExternalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param repositoryId The unique identifier of the repository
 @return ApiRepositoriesRepositoryIdImagesExternalGetRequest
*/
func (a *RepositoriesAPIService) RepositoriesRepositoryIdImagesExternalGet(ctx context.Context, repositoryId string) ApiRepositoriesRepositoryIdImagesExternalGetRequest {
	return ApiRepositoriesRepositoryIdImagesExternalGetRequest{
		ApiService: a,
		ctx: ctx,
		repositoryId: repositoryId,
	}
}

// Execute executes the request
//  @return ExternalImageList
func (a *RepositoriesAPIService) RepositoriesRepositoryIdImagesExternalGetExecute(r ApiRepositoriesRepositoryIdImagesExternalGetRequest) (*ExternalImageList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalImageList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAPIService.RepositoriesRepositoryIdImagesExternalGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/repositories/{repository_id}/images/external"
	localVarPath = strings.Replace(localVarPath, "{"+"repository_id"+"}", url.PathEscape(parameterValueToString(r.repositoryId, "repositoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkspacesWorkspaceIdRepositoriesExternalGetRequest struct {
	ctx context.Context
	ApiService *RepositoriesAPIService
	workspaceId string
}

func (r ApiWorkspacesWorkspaceIdRepositoriesExternalGetRequest) Execute() (*ExternalRepositoryList, *http.Response, error) {
	return r.ApiService.WorkspacesWorkspaceIdRepositoriesExternalGetExecute(r)
}

/*
WorkspacesWorkspaceIdRepositoriesExternalGet Method for WorkspacesWorkspaceIdRepositoriesExternalGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspaceId The unique identifier of the workspace
 @return ApiWorkspacesWorkspaceIdRepositoriesExternalGetRequest
*/
func (a *RepositoriesAPIService) WorkspacesWorkspaceIdRepositoriesExternalGet(ctx context.Context, workspaceId string) ApiWorkspacesWorkspaceIdRepositoriesExternalGetRequest {
	return ApiWorkspacesWorkspaceIdRepositoriesExternalGetRequest{
		ApiService: a,
		ctx: ctx,
		workspaceId: workspaceId,
	}
}

// Execute executes the request
//  @return ExternalRepositoryList
func (a *RepositoriesAPIService) WorkspacesWorkspaceIdRepositoriesExternalGetExecute(r ApiWorkspacesWorkspaceIdRepositoriesExternalGetRequest) (*ExternalRepositoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExternalRepositoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoriesAPIService.WorkspacesWorkspaceIdRepositoriesExternalGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workspaces/{workspace_id}/repositories/external"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_id"+"}", url.PathEscape(parameterValueToString(r.workspaceId, "workspaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
