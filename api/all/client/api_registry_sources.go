/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RegistrySourcesAPIService RegistrySourcesAPI service
type RegistrySourcesAPIService service

type ApiSourcesRegistriesRegistrySourceIdComposeFileGetRequest struct {
	ctx context.Context
	ApiService *RegistrySourcesAPIService
	registrySourceId string
}

func (r ApiSourcesRegistriesRegistrySourceIdComposeFileGetRequest) Execute() (*ComposeFile, *http.Response, error) {
	return r.ApiService.SourcesRegistriesRegistrySourceIdComposeFileGetExecute(r)
}

/*
SourcesRegistriesRegistrySourceIdComposeFileGet Method for SourcesRegistriesRegistrySourceIdComposeFileGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrySourceId The unique identifier of the registry source
 @return ApiSourcesRegistriesRegistrySourceIdComposeFileGetRequest
*/
func (a *RegistrySourcesAPIService) SourcesRegistriesRegistrySourceIdComposeFileGet(ctx context.Context, registrySourceId string) ApiSourcesRegistriesRegistrySourceIdComposeFileGetRequest {
	return ApiSourcesRegistriesRegistrySourceIdComposeFileGetRequest{
		ApiService: a,
		ctx: ctx,
		registrySourceId: registrySourceId,
	}
}

// Execute executes the request
//  @return ComposeFile
func (a *RegistrySourcesAPIService) SourcesRegistriesRegistrySourceIdComposeFileGetExecute(r ApiSourcesRegistriesRegistrySourceIdComposeFileGetRequest) (*ComposeFile, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComposeFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistrySourcesAPIService.SourcesRegistriesRegistrySourceIdComposeFileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sources/registries/{registry_source_id}/compose_file"
	localVarPath = strings.Replace(localVarPath, "{"+"registry_source_id"+"}", url.PathEscape(parameterValueToString(r.registrySourceId, "registrySourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSourcesRegistriesRegistrySourceIdGetRequest struct {
	ctx context.Context
	ApiService *RegistrySourcesAPIService
	registrySourceId string
}

func (r ApiSourcesRegistriesRegistrySourceIdGetRequest) Execute() (*RegistrySource, *http.Response, error) {
	return r.ApiService.SourcesRegistriesRegistrySourceIdGetExecute(r)
}

/*
SourcesRegistriesRegistrySourceIdGet Method for SourcesRegistriesRegistrySourceIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrySourceId The unique identifier of the registry source
 @return ApiSourcesRegistriesRegistrySourceIdGetRequest
*/
func (a *RegistrySourcesAPIService) SourcesRegistriesRegistrySourceIdGet(ctx context.Context, registrySourceId string) ApiSourcesRegistriesRegistrySourceIdGetRequest {
	return ApiSourcesRegistriesRegistrySourceIdGetRequest{
		ApiService: a,
		ctx: ctx,
		registrySourceId: registrySourceId,
	}
}

// Execute executes the request
//  @return RegistrySource
func (a *RegistrySourcesAPIService) SourcesRegistriesRegistrySourceIdGetExecute(r ApiSourcesRegistriesRegistrySourceIdGetRequest) (*RegistrySource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegistrySource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistrySourcesAPIService.SourcesRegistriesRegistrySourceIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sources/registries/{registry_source_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"registry_source_id"+"}", url.PathEscape(parameterValueToString(r.registrySourceId, "registrySourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSourcesRegistriesRegistrySourceIdPatchRequest struct {
	ctx context.Context
	ApiService *RegistrySourcesAPIService
	registrySourceId string
	updateRegistrySource *UpdateRegistrySource
}

func (r ApiSourcesRegistriesRegistrySourceIdPatchRequest) UpdateRegistrySource(updateRegistrySource UpdateRegistrySource) ApiSourcesRegistriesRegistrySourceIdPatchRequest {
	r.updateRegistrySource = &updateRegistrySource
	return r
}

func (r ApiSourcesRegistriesRegistrySourceIdPatchRequest) Execute() (*RegistrySource, *http.Response, error) {
	return r.ApiService.SourcesRegistriesRegistrySourceIdPatchExecute(r)
}

/*
SourcesRegistriesRegistrySourceIdPatch Method for SourcesRegistriesRegistrySourceIdPatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param registrySourceId The unique identifier of the registry source
 @return ApiSourcesRegistriesRegistrySourceIdPatchRequest
*/
func (a *RegistrySourcesAPIService) SourcesRegistriesRegistrySourceIdPatch(ctx context.Context, registrySourceId string) ApiSourcesRegistriesRegistrySourceIdPatchRequest {
	return ApiSourcesRegistriesRegistrySourceIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		registrySourceId: registrySourceId,
	}
}

// Execute executes the request
//  @return RegistrySource
func (a *RegistrySourcesAPIService) SourcesRegistriesRegistrySourceIdPatchExecute(r ApiSourcesRegistriesRegistrySourceIdPatchRequest) (*RegistrySource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegistrySource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistrySourcesAPIService.SourcesRegistriesRegistrySourceIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sources/registries/{registry_source_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"registry_source_id"+"}", url.PathEscape(parameterValueToString(r.registrySourceId, "registrySourceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateRegistrySource == nil {
		return localVarReturnValue, nil, reportError("updateRegistrySource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateRegistrySource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkspacesWorkspaceIdSourcesRegistriesGetRequest struct {
	ctx context.Context
	ApiService *RegistrySourcesAPIService
	workspaceId string
}

func (r ApiWorkspacesWorkspaceIdSourcesRegistriesGetRequest) Execute() (*RegistrySourceList, *http.Response, error) {
	return r.ApiService.WorkspacesWorkspaceIdSourcesRegistriesGetExecute(r)
}

/*
WorkspacesWorkspaceIdSourcesRegistriesGet Method for WorkspacesWorkspaceIdSourcesRegistriesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspaceId The unique identifier of the workspace
 @return ApiWorkspacesWorkspaceIdSourcesRegistriesGetRequest
*/
func (a *RegistrySourcesAPIService) WorkspacesWorkspaceIdSourcesRegistriesGet(ctx context.Context, workspaceId string) ApiWorkspacesWorkspaceIdSourcesRegistriesGetRequest {
	return ApiWorkspacesWorkspaceIdSourcesRegistriesGetRequest{
		ApiService: a,
		ctx: ctx,
		workspaceId: workspaceId,
	}
}

// Execute executes the request
//  @return RegistrySourceList
func (a *RegistrySourcesAPIService) WorkspacesWorkspaceIdSourcesRegistriesGetExecute(r ApiWorkspacesWorkspaceIdSourcesRegistriesGetRequest) (*RegistrySourceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegistrySourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistrySourcesAPIService.WorkspacesWorkspaceIdSourcesRegistriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workspaces/{workspace_id}/sources/registries"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_id"+"}", url.PathEscape(parameterValueToString(r.workspaceId, "workspaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest struct {
	ctx context.Context
	ApiService *RegistrySourcesAPIService
	workspaceId string
	createRegistrySource *CreateRegistrySource
}

func (r ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest) CreateRegistrySource(createRegistrySource CreateRegistrySource) ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest {
	r.createRegistrySource = &createRegistrySource
	return r
}

func (r ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest) Execute() (*RegistrySource, *http.Response, error) {
	return r.ApiService.WorkspacesWorkspaceIdSourcesRegistriesPostExecute(r)
}

/*
WorkspacesWorkspaceIdSourcesRegistriesPost Method for WorkspacesWorkspaceIdSourcesRegistriesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workspaceId The unique identifier of the workspace
 @return ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest
*/
func (a *RegistrySourcesAPIService) WorkspacesWorkspaceIdSourcesRegistriesPost(ctx context.Context, workspaceId string) ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest {
	return ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest{
		ApiService: a,
		ctx: ctx,
		workspaceId: workspaceId,
	}
}

// Execute executes the request
//  @return RegistrySource
func (a *RegistrySourcesAPIService) WorkspacesWorkspaceIdSourcesRegistriesPostExecute(r ApiWorkspacesWorkspaceIdSourcesRegistriesPostRequest) (*RegistrySource, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RegistrySource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegistrySourcesAPIService.WorkspacesWorkspaceIdSourcesRegistriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workspaces/{workspace_id}/sources/registries"
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_id"+"}", url.PathEscape(parameterValueToString(r.workspaceId, "workspaceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createRegistrySource == nil {
		return localVarReturnValue, nil, reportError("createRegistrySource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRegistrySource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
