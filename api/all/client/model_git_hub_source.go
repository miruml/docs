/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GitHubSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitHubSource{}

// GitHubSource struct for GitHubSource
type GitHubSource struct {
	Id string `json:"id"`
	Object string `json:"object"`
	Name string `json:"name"`
	RepositoryId int64 `json:"repository_id"`
	RepositoryName string `json:"repository_name"`
	Branch string `json:"branch"`
	BuildPath string `json:"build_path"`
	Deleted bool `json:"deleted"`
}

type _GitHubSource GitHubSource

// NewGitHubSource instantiates a new GitHubSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitHubSource(id string, object string, name string, repositoryId int64, repositoryName string, branch string, buildPath string, deleted bool) *GitHubSource {
	this := GitHubSource{}
	this.Id = id
	this.Object = object
	this.Name = name
	this.RepositoryId = repositoryId
	this.RepositoryName = repositoryName
	this.Branch = branch
	this.BuildPath = buildPath
	this.Deleted = deleted
	return &this
}

// NewGitHubSourceWithDefaults instantiates a new GitHubSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitHubSourceWithDefaults() *GitHubSource {
	this := GitHubSource{}
	return &this
}

// GetId returns the Id field value
func (o *GitHubSource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GitHubSource) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *GitHubSource) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *GitHubSource) SetObject(v string) {
	o.Object = v
}

// GetName returns the Name field value
func (o *GitHubSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitHubSource) SetName(v string) {
	o.Name = v
}

// GetRepositoryId returns the RepositoryId field value
func (o *GitHubSource) GetRepositoryId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetRepositoryIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryId, true
}

// SetRepositoryId sets field value
func (o *GitHubSource) SetRepositoryId(v int64) {
	o.RepositoryId = v
}

// GetRepositoryName returns the RepositoryName field value
func (o *GitHubSource) GetRepositoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryName
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetRepositoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryName, true
}

// SetRepositoryName sets field value
func (o *GitHubSource) SetRepositoryName(v string) {
	o.RepositoryName = v
}

// GetBranch returns the Branch field value
func (o *GitHubSource) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *GitHubSource) SetBranch(v string) {
	o.Branch = v
}

// GetBuildPath returns the BuildPath field value
func (o *GitHubSource) GetBuildPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildPath
}

// GetBuildPathOk returns a tuple with the BuildPath field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetBuildPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildPath, true
}

// SetBuildPath sets field value
func (o *GitHubSource) SetBuildPath(v string) {
	o.BuildPath = v
}

// GetDeleted returns the Deleted field value
func (o *GitHubSource) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *GitHubSource) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *GitHubSource) SetDeleted(v bool) {
	o.Deleted = v
}

func (o GitHubSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitHubSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["name"] = o.Name
	toSerialize["repository_id"] = o.RepositoryId
	toSerialize["repository_name"] = o.RepositoryName
	toSerialize["branch"] = o.Branch
	toSerialize["build_path"] = o.BuildPath
	toSerialize["deleted"] = o.Deleted
	return toSerialize, nil
}

func (o *GitHubSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"name",
		"repository_id",
		"repository_name",
		"branch",
		"build_path",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitHubSource := _GitHubSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitHubSource)

	if err != nil {
		return err
	}

	*o = GitHubSource(varGitHubSource)

	return err
}

type NullableGitHubSource struct {
	value *GitHubSource
	isSet bool
}

func (v NullableGitHubSource) Get() *GitHubSource {
	return v.value
}

func (v *NullableGitHubSource) Set(val *GitHubSource) {
	v.value = val
	v.isSet = true
}

func (v NullableGitHubSource) IsSet() bool {
	return v.isSet
}

func (v *NullableGitHubSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitHubSource(val *GitHubSource) *NullableGitHubSource {
	return &NullableGitHubSource{value: val, isSet: true}
}

func (v NullableGitHubSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitHubSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


