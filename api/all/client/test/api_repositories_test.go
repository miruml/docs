/*
Miru API

Testing RepositoriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_RepositoriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoriesAPIService IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dockerhubIntegrationId string

		resp, httpRes, err := apiClient.RepositoriesAPI.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(context.Background(), dockerhubIntegrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAPIService IntegrationsGarGarIntegrationIdRepositoriesExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var garIntegrationId string

		resp, httpRes, err := apiClient.RepositoriesAPI.IntegrationsGarGarIntegrationIdRepositoriesExternalGet(context.Background(), garIntegrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAPIService RepositoriesRepositoryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryId string

		resp, httpRes, err := apiClient.RepositoriesAPI.RepositoriesRepositoryIdGet(context.Background(), repositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAPIService RepositoriesRepositoryIdImagesExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repositoryId string

		resp, httpRes, err := apiClient.RepositoriesAPI.RepositoriesRepositoryIdImagesExternalGet(context.Background(), repositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoriesAPIService WorkspacesWorkspaceIdRepositoriesExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspaceId string

		resp, httpRes, err := apiClient.RepositoriesAPI.WorkspacesWorkspaceIdRepositoriesExternalGet(context.Background(), workspaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
