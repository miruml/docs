/*
Miru API

Testing ContainerRepositoriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ContainerRepositoriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContainerRepositoriesAPIService IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dockerhubIntegrationId string

		resp, httpRes, err := apiClient.ContainerRepositoriesAPI.IntegrationsDockerhubDockerhubIntegrationIdRepositoriesExternalGet(context.Background(), dockerhubIntegrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRepositoriesAPIService IntegrationsGarGarIntegrationIdRepositoriesExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var garIntegrationId string

		resp, httpRes, err := apiClient.ContainerRepositoriesAPI.IntegrationsGarGarIntegrationIdRepositoriesExternalGet(context.Background(), garIntegrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRepositoriesAPIService RepositoriesContainerContainerRepositoryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var containerRepositoryId string

		resp, httpRes, err := apiClient.ContainerRepositoriesAPI.RepositoriesContainerContainerRepositoryIdGet(context.Background(), containerRepositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContainerRepositoriesAPIService WorkspacesWorkspaceIdRepositoriesContainerExternalGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspaceId string

		resp, httpRes, err := apiClient.ContainerRepositoriesAPI.WorkspacesWorkspaceIdRepositoriesContainerExternalGet(context.Background(), workspaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
