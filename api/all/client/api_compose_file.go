/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ComposeFileAPIService ComposeFileAPI service
type ComposeFileAPIService service

type ApiWorkspaceWorkspaceIdComposeVerifyPostRequest struct {
	ctx context.Context
	ApiService *ComposeFileAPIService
	verifyComposeFile *VerifyComposeFile
}

func (r ApiWorkspaceWorkspaceIdComposeVerifyPostRequest) VerifyComposeFile(verifyComposeFile VerifyComposeFile) ApiWorkspaceWorkspaceIdComposeVerifyPostRequest {
	r.verifyComposeFile = &verifyComposeFile
	return r
}

func (r ApiWorkspaceWorkspaceIdComposeVerifyPostRequest) Execute() (*VerifiedComposeFileResponse, *http.Response, error) {
	return r.ApiService.WorkspaceWorkspaceIdComposeVerifyPostExecute(r)
}

/*
WorkspaceWorkspaceIdComposeVerifyPost Method for WorkspaceWorkspaceIdComposeVerifyPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiWorkspaceWorkspaceIdComposeVerifyPostRequest
*/
func (a *ComposeFileAPIService) WorkspaceWorkspaceIdComposeVerifyPost(ctx context.Context) ApiWorkspaceWorkspaceIdComposeVerifyPostRequest {
	return ApiWorkspaceWorkspaceIdComposeVerifyPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VerifiedComposeFileResponse
func (a *ComposeFileAPIService) WorkspaceWorkspaceIdComposeVerifyPostExecute(r ApiWorkspaceWorkspaceIdComposeVerifyPostRequest) (*VerifiedComposeFileResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VerifiedComposeFileResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComposeFileAPIService.WorkspaceWorkspaceIdComposeVerifyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workspace/{workspace_id}/compose/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.verifyComposeFile == nil {
		return localVarReturnValue, nil, reportError("verifyComposeFile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.verifyComposeFile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
