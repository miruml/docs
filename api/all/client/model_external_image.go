/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExternalImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalImage{}

// ExternalImage struct for ExternalImage
type ExternalImage struct {
	Object *string `json:"object,omitempty"`
	Digest string `json:"digest"`
	Tags []string `json:"tags"`
	Uri string `json:"uri"`
	Bytes int32 `json:"bytes"`
	UploadedAt string `json:"uploaded_at"`
}

type _ExternalImage ExternalImage

// NewExternalImage instantiates a new ExternalImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalImage(digest string, tags []string, uri string, bytes int32, uploadedAt string) *ExternalImage {
	this := ExternalImage{}
	this.Digest = digest
	this.Tags = tags
	this.Uri = uri
	this.Bytes = bytes
	this.UploadedAt = uploadedAt
	return &this
}

// NewExternalImageWithDefaults instantiates a new ExternalImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalImageWithDefaults() *ExternalImage {
	this := ExternalImage{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ExternalImage) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalImage) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ExternalImage) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ExternalImage) SetObject(v string) {
	o.Object = &v
}

// GetDigest returns the Digest field value
func (o *ExternalImage) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *ExternalImage) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *ExternalImage) SetDigest(v string) {
	o.Digest = v
}

// GetTags returns the Tags field value
func (o *ExternalImage) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ExternalImage) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ExternalImage) SetTags(v []string) {
	o.Tags = v
}

// GetUri returns the Uri field value
func (o *ExternalImage) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *ExternalImage) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *ExternalImage) SetUri(v string) {
	o.Uri = v
}

// GetBytes returns the Bytes field value
func (o *ExternalImage) GetBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *ExternalImage) GetBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *ExternalImage) SetBytes(v int32) {
	o.Bytes = v
}

// GetUploadedAt returns the UploadedAt field value
func (o *ExternalImage) GetUploadedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value
// and a boolean to check if the value has been set.
func (o *ExternalImage) GetUploadedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedAt, true
}

// SetUploadedAt sets field value
func (o *ExternalImage) SetUploadedAt(v string) {
	o.UploadedAt = v
}

func (o ExternalImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["digest"] = o.Digest
	toSerialize["tags"] = o.Tags
	toSerialize["uri"] = o.Uri
	toSerialize["bytes"] = o.Bytes
	toSerialize["uploaded_at"] = o.UploadedAt
	return toSerialize, nil
}

func (o *ExternalImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"digest",
		"tags",
		"uri",
		"bytes",
		"uploaded_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalImage := _ExternalImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalImage)

	if err != nil {
		return err
	}

	*o = ExternalImage(varExternalImage)

	return err
}

type NullableExternalImage struct {
	value *ExternalImage
	isSet bool
}

func (v NullableExternalImage) Get() *ExternalImage {
	return v.value
}

func (v *NullableExternalImage) Set(val *ExternalImage) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalImage) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalImage(val *ExternalImage) *NullableExternalImage {
	return &NullableExternalImage{value: val, isSet: true}
}

func (v NullableExternalImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


