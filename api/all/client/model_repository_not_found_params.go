/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RepositoryNotFoundParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryNotFoundParams{}

// RepositoryNotFoundParams struct for RepositoryNotFoundParams
type RepositoryNotFoundParams struct {
	RegistryType string `json:"registry_type"`
	RegistryUrl string `json:"registry_url"`
	RepositoryName string `json:"repository_name"`
	Uri string `json:"uri"`
}

type _RepositoryNotFoundParams RepositoryNotFoundParams

// NewRepositoryNotFoundParams instantiates a new RepositoryNotFoundParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryNotFoundParams(registryType string, registryUrl string, repositoryName string, uri string) *RepositoryNotFoundParams {
	this := RepositoryNotFoundParams{}
	this.RegistryType = registryType
	this.RegistryUrl = registryUrl
	this.RepositoryName = repositoryName
	this.Uri = uri
	return &this
}

// NewRepositoryNotFoundParamsWithDefaults instantiates a new RepositoryNotFoundParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryNotFoundParamsWithDefaults() *RepositoryNotFoundParams {
	this := RepositoryNotFoundParams{}
	return &this
}

// GetRegistryType returns the RegistryType field value
func (o *RepositoryNotFoundParams) GetRegistryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryType
}

// GetRegistryTypeOk returns a tuple with the RegistryType field value
// and a boolean to check if the value has been set.
func (o *RepositoryNotFoundParams) GetRegistryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryType, true
}

// SetRegistryType sets field value
func (o *RepositoryNotFoundParams) SetRegistryType(v string) {
	o.RegistryType = v
}

// GetRegistryUrl returns the RegistryUrl field value
func (o *RepositoryNotFoundParams) GetRegistryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value
// and a boolean to check if the value has been set.
func (o *RepositoryNotFoundParams) GetRegistryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryUrl, true
}

// SetRegistryUrl sets field value
func (o *RepositoryNotFoundParams) SetRegistryUrl(v string) {
	o.RegistryUrl = v
}

// GetRepositoryName returns the RepositoryName field value
func (o *RepositoryNotFoundParams) GetRepositoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryName
}

// GetRepositoryNameOk returns a tuple with the RepositoryName field value
// and a boolean to check if the value has been set.
func (o *RepositoryNotFoundParams) GetRepositoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryName, true
}

// SetRepositoryName sets field value
func (o *RepositoryNotFoundParams) SetRepositoryName(v string) {
	o.RepositoryName = v
}

// GetUri returns the Uri field value
func (o *RepositoryNotFoundParams) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *RepositoryNotFoundParams) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *RepositoryNotFoundParams) SetUri(v string) {
	o.Uri = v
}

func (o RepositoryNotFoundParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryNotFoundParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registry_type"] = o.RegistryType
	toSerialize["registry_url"] = o.RegistryUrl
	toSerialize["repository_name"] = o.RepositoryName
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *RepositoryNotFoundParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registry_type",
		"registry_url",
		"repository_name",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryNotFoundParams := _RepositoryNotFoundParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRepositoryNotFoundParams)

	if err != nil {
		return err
	}

	*o = RepositoryNotFoundParams(varRepositoryNotFoundParams)

	return err
}

type NullableRepositoryNotFoundParams struct {
	value *RepositoryNotFoundParams
	isSet bool
}

func (v NullableRepositoryNotFoundParams) Get() *RepositoryNotFoundParams {
	return v.value
}

func (v *NullableRepositoryNotFoundParams) Set(val *RepositoryNotFoundParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryNotFoundParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryNotFoundParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryNotFoundParams(val *RepositoryNotFoundParams) *NullableRepositoryNotFoundParams {
	return &NullableRepositoryNotFoundParams{value: val, isSet: true}
}

func (v NullableRepositoryNotFoundParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryNotFoundParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


