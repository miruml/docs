/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContainerRepositoryWithIsExtra type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainerRepositoryWithIsExtra{}

// ContainerRepositoryWithIsExtra struct for ContainerRepositoryWithIsExtra
type ContainerRepositoryWithIsExtra struct {
	RegistryUrl string `json:"registry_url"`
	Name string `json:"name"`
	Uri string `json:"uri"`
	Type ContainerRepositoryType `json:"type"`
	Object string `json:"object"`
	Id string `json:"id"`
	IsExtra bool `json:"is_extra"`
}

type _ContainerRepositoryWithIsExtra ContainerRepositoryWithIsExtra

// NewContainerRepositoryWithIsExtra instantiates a new ContainerRepositoryWithIsExtra object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerRepositoryWithIsExtra(registryUrl string, name string, uri string, type_ ContainerRepositoryType, object string, id string, isExtra bool) *ContainerRepositoryWithIsExtra {
	this := ContainerRepositoryWithIsExtra{}
	this.RegistryUrl = registryUrl
	this.Name = name
	this.Uri = uri
	this.Type = type_
	this.Object = object
	this.Id = id
	this.IsExtra = isExtra
	return &this
}

// NewContainerRepositoryWithIsExtraWithDefaults instantiates a new ContainerRepositoryWithIsExtra object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerRepositoryWithIsExtraWithDefaults() *ContainerRepositoryWithIsExtra {
	this := ContainerRepositoryWithIsExtra{}
	return &this
}

// GetRegistryUrl returns the RegistryUrl field value
func (o *ContainerRepositoryWithIsExtra) GetRegistryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetRegistryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryUrl, true
}

// SetRegistryUrl sets field value
func (o *ContainerRepositoryWithIsExtra) SetRegistryUrl(v string) {
	o.RegistryUrl = v
}

// GetName returns the Name field value
func (o *ContainerRepositoryWithIsExtra) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContainerRepositoryWithIsExtra) SetName(v string) {
	o.Name = v
}

// GetUri returns the Uri field value
func (o *ContainerRepositoryWithIsExtra) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *ContainerRepositoryWithIsExtra) SetUri(v string) {
	o.Uri = v
}

// GetType returns the Type field value
func (o *ContainerRepositoryWithIsExtra) GetType() ContainerRepositoryType {
	if o == nil {
		var ret ContainerRepositoryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetTypeOk() (*ContainerRepositoryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContainerRepositoryWithIsExtra) SetType(v ContainerRepositoryType) {
	o.Type = v
}

// GetObject returns the Object field value
func (o *ContainerRepositoryWithIsExtra) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ContainerRepositoryWithIsExtra) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *ContainerRepositoryWithIsExtra) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ContainerRepositoryWithIsExtra) SetId(v string) {
	o.Id = v
}

// GetIsExtra returns the IsExtra field value
func (o *ContainerRepositoryWithIsExtra) GetIsExtra() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExtra
}

// GetIsExtraOk returns a tuple with the IsExtra field value
// and a boolean to check if the value has been set.
func (o *ContainerRepositoryWithIsExtra) GetIsExtraOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExtra, true
}

// SetIsExtra sets field value
func (o *ContainerRepositoryWithIsExtra) SetIsExtra(v bool) {
	o.IsExtra = v
}

func (o ContainerRepositoryWithIsExtra) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainerRepositoryWithIsExtra) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registry_url"] = o.RegistryUrl
	toSerialize["name"] = o.Name
	toSerialize["uri"] = o.Uri
	toSerialize["type"] = o.Type
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["is_extra"] = o.IsExtra
	return toSerialize, nil
}

func (o *ContainerRepositoryWithIsExtra) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registry_url",
		"name",
		"uri",
		"type",
		"object",
		"id",
		"is_extra",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainerRepositoryWithIsExtra := _ContainerRepositoryWithIsExtra{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainerRepositoryWithIsExtra)

	if err != nil {
		return err
	}

	*o = ContainerRepositoryWithIsExtra(varContainerRepositoryWithIsExtra)

	return err
}

type NullableContainerRepositoryWithIsExtra struct {
	value *ContainerRepositoryWithIsExtra
	isSet bool
}

func (v NullableContainerRepositoryWithIsExtra) Get() *ContainerRepositoryWithIsExtra {
	return v.value
}

func (v *NullableContainerRepositoryWithIsExtra) Set(val *ContainerRepositoryWithIsExtra) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerRepositoryWithIsExtra) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerRepositoryWithIsExtra) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerRepositoryWithIsExtra(val *ContainerRepositoryWithIsExtra) *NullableContainerRepositoryWithIsExtra {
	return &NullableContainerRepositoryWithIsExtra{value: val, isSet: true}
}

func (v NullableContainerRepositoryWithIsExtra) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerRepositoryWithIsExtra) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


