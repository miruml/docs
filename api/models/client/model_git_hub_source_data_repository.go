/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GitHubSourceDataRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitHubSourceDataRepository{}

// GitHubSourceDataRepository struct for GitHubSourceDataRepository
type GitHubSourceDataRepository struct {
	Id int64 `json:"id"`
	HtmlUrl string `json:"html_url"`
	CloneUrl string `json:"clone_url"`
	FullName string `json:"full_name"`
	PushedAt time.Time `json:"pushed_at"`
}

type _GitHubSourceDataRepository GitHubSourceDataRepository

// NewGitHubSourceDataRepository instantiates a new GitHubSourceDataRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitHubSourceDataRepository(id int64, htmlUrl string, cloneUrl string, fullName string, pushedAt time.Time) *GitHubSourceDataRepository {
	this := GitHubSourceDataRepository{}
	this.Id = id
	this.HtmlUrl = htmlUrl
	this.CloneUrl = cloneUrl
	this.FullName = fullName
	this.PushedAt = pushedAt
	return &this
}

// NewGitHubSourceDataRepositoryWithDefaults instantiates a new GitHubSourceDataRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitHubSourceDataRepositoryWithDefaults() *GitHubSourceDataRepository {
	this := GitHubSourceDataRepository{}
	return &this
}

// GetId returns the Id field value
func (o *GitHubSourceDataRepository) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceDataRepository) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GitHubSourceDataRepository) SetId(v int64) {
	o.Id = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *GitHubSourceDataRepository) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceDataRepository) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *GitHubSourceDataRepository) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetCloneUrl returns the CloneUrl field value
func (o *GitHubSourceDataRepository) GetCloneUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CloneUrl
}

// GetCloneUrlOk returns a tuple with the CloneUrl field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceDataRepository) GetCloneUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloneUrl, true
}

// SetCloneUrl sets field value
func (o *GitHubSourceDataRepository) SetCloneUrl(v string) {
	o.CloneUrl = v
}

// GetFullName returns the FullName field value
func (o *GitHubSourceDataRepository) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceDataRepository) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *GitHubSourceDataRepository) SetFullName(v string) {
	o.FullName = v
}

// GetPushedAt returns the PushedAt field value
func (o *GitHubSourceDataRepository) GetPushedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PushedAt
}

// GetPushedAtOk returns a tuple with the PushedAt field value
// and a boolean to check if the value has been set.
func (o *GitHubSourceDataRepository) GetPushedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PushedAt, true
}

// SetPushedAt sets field value
func (o *GitHubSourceDataRepository) SetPushedAt(v time.Time) {
	o.PushedAt = v
}

func (o GitHubSourceDataRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitHubSourceDataRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["html_url"] = o.HtmlUrl
	toSerialize["clone_url"] = o.CloneUrl
	toSerialize["full_name"] = o.FullName
	toSerialize["pushed_at"] = o.PushedAt
	return toSerialize, nil
}

func (o *GitHubSourceDataRepository) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"html_url",
		"clone_url",
		"full_name",
		"pushed_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitHubSourceDataRepository := _GitHubSourceDataRepository{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitHubSourceDataRepository)

	if err != nil {
		return err
	}

	*o = GitHubSourceDataRepository(varGitHubSourceDataRepository)

	return err
}

type NullableGitHubSourceDataRepository struct {
	value *GitHubSourceDataRepository
	isSet bool
}

func (v NullableGitHubSourceDataRepository) Get() *GitHubSourceDataRepository {
	return v.value
}

func (v *NullableGitHubSourceDataRepository) Set(val *GitHubSourceDataRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableGitHubSourceDataRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableGitHubSourceDataRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitHubSourceDataRepository(val *GitHubSourceDataRepository) *NullableGitHubSourceDataRepository {
	return &NullableGitHubSourceDataRepository{value: val, isSet: true}
}

func (v NullableGitHubSourceDataRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitHubSourceDataRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


