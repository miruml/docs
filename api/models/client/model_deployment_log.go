/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DeploymentLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentLog{}

// DeploymentLog struct for DeploymentLog
type DeploymentLog struct {
	Timestamp time.Time `json:"timestamp"`
	Level string `json:"level"`
	Message string `json:"message"`
	Code string `json:"code"`
}

type _DeploymentLog DeploymentLog

// NewDeploymentLog instantiates a new DeploymentLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentLog(timestamp time.Time, level string, message string, code string) *DeploymentLog {
	this := DeploymentLog{}
	this.Timestamp = timestamp
	this.Level = level
	this.Message = message
	this.Code = code
	return &this
}

// NewDeploymentLogWithDefaults instantiates a new DeploymentLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentLogWithDefaults() *DeploymentLog {
	this := DeploymentLog{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *DeploymentLog) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DeploymentLog) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DeploymentLog) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetLevel returns the Level field value
func (o *DeploymentLog) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *DeploymentLog) GetLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *DeploymentLog) SetLevel(v string) {
	o.Level = v
}

// GetMessage returns the Message field value
func (o *DeploymentLog) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *DeploymentLog) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *DeploymentLog) SetMessage(v string) {
	o.Message = v
}

// GetCode returns the Code field value
func (o *DeploymentLog) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *DeploymentLog) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *DeploymentLog) SetCode(v string) {
	o.Code = v
}

func (o DeploymentLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["level"] = o.Level
	toSerialize["message"] = o.Message
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

func (o *DeploymentLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"level",
		"message",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentLog := _DeploymentLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentLog)

	if err != nil {
		return err
	}

	*o = DeploymentLog(varDeploymentLog)

	return err
}

type NullableDeploymentLog struct {
	value *DeploymentLog
	isSet bool
}

func (v NullableDeploymentLog) Get() *DeploymentLog {
	return v.value
}

func (v *NullableDeploymentLog) Set(val *DeploymentLog) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentLog) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentLog(val *DeploymentLog) *NullableDeploymentLog {
	return &NullableDeploymentLog{value: val, isSet: true}
}

func (v NullableDeploymentLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


