/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ArtifactWithSourceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactWithSourceData{}

// ArtifactWithSourceData struct for ArtifactWithSourceData
type ArtifactWithSourceData struct {
	Object string `json:"object"`
	Id string `json:"id"`
	Status ArtifactStatus `json:"status"`
	Digest string `json:"digest"`
	Aarch64 bool `json:"aarch64"`
	X8664 bool `json:"x86_64"`
	CreatedAt time.Time `json:"created_at"`
	ReadyAt NullableTime `json:"ready_at"`
	FailedAt NullableTime `json:"failed_at"`
	SourceId string `json:"source_id"`
	SourceType string `json:"source_type"`
	CreatedBy User `json:"created_by"`
	RegistrySource RegistrySource `json:"registry_source"`
	GithubSource GitHubSource `json:"github_source"`
	GithubSourceData GitHubSourceData `json:"github_source_data"`
}

type _ArtifactWithSourceData ArtifactWithSourceData

// NewArtifactWithSourceData instantiates a new ArtifactWithSourceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactWithSourceData(object string, id string, status ArtifactStatus, digest string, aarch64 bool, x8664 bool, createdAt time.Time, readyAt NullableTime, failedAt NullableTime, sourceId string, sourceType string, createdBy User, registrySource RegistrySource, githubSource GitHubSource, githubSourceData GitHubSourceData) *ArtifactWithSourceData {
	this := ArtifactWithSourceData{}
	this.Object = object
	this.Id = id
	this.Status = status
	this.Digest = digest
	this.Aarch64 = aarch64
	this.X8664 = x8664
	this.CreatedAt = createdAt
	this.ReadyAt = readyAt
	this.FailedAt = failedAt
	this.SourceId = sourceId
	this.SourceType = sourceType
	this.CreatedBy = createdBy
	this.RegistrySource = registrySource
	this.GithubSource = githubSource
	this.GithubSourceData = githubSourceData
	return &this
}

// NewArtifactWithSourceDataWithDefaults instantiates a new ArtifactWithSourceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactWithSourceDataWithDefaults() *ArtifactWithSourceData {
	this := ArtifactWithSourceData{}
	return &this
}

// GetObject returns the Object field value
func (o *ArtifactWithSourceData) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ArtifactWithSourceData) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *ArtifactWithSourceData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArtifactWithSourceData) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *ArtifactWithSourceData) GetStatus() ArtifactStatus {
	if o == nil {
		var ret ArtifactStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetStatusOk() (*ArtifactStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ArtifactWithSourceData) SetStatus(v ArtifactStatus) {
	o.Status = v
}

// GetDigest returns the Digest field value
func (o *ArtifactWithSourceData) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *ArtifactWithSourceData) SetDigest(v string) {
	o.Digest = v
}

// GetAarch64 returns the Aarch64 field value
func (o *ArtifactWithSourceData) GetAarch64() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Aarch64
}

// GetAarch64Ok returns a tuple with the Aarch64 field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetAarch64Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aarch64, true
}

// SetAarch64 sets field value
func (o *ArtifactWithSourceData) SetAarch64(v bool) {
	o.Aarch64 = v
}

// GetX8664 returns the X8664 field value
func (o *ArtifactWithSourceData) GetX8664() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.X8664
}

// GetX8664Ok returns a tuple with the X8664 field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetX8664Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X8664, true
}

// SetX8664 sets field value
func (o *ArtifactWithSourceData) SetX8664(v bool) {
	o.X8664 = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ArtifactWithSourceData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ArtifactWithSourceData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetReadyAt returns the ReadyAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ArtifactWithSourceData) GetReadyAt() time.Time {
	if o == nil || o.ReadyAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ReadyAt.Get()
}

// GetReadyAtOk returns a tuple with the ReadyAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtifactWithSourceData) GetReadyAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadyAt.Get(), o.ReadyAt.IsSet()
}

// SetReadyAt sets field value
func (o *ArtifactWithSourceData) SetReadyAt(v time.Time) {
	o.ReadyAt.Set(&v)
}

// GetFailedAt returns the FailedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ArtifactWithSourceData) GetFailedAt() time.Time {
	if o == nil || o.FailedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.FailedAt.Get()
}

// GetFailedAtOk returns a tuple with the FailedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArtifactWithSourceData) GetFailedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedAt.Get(), o.FailedAt.IsSet()
}

// SetFailedAt sets field value
func (o *ArtifactWithSourceData) SetFailedAt(v time.Time) {
	o.FailedAt.Set(&v)
}

// GetSourceId returns the SourceId field value
func (o *ArtifactWithSourceData) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *ArtifactWithSourceData) SetSourceId(v string) {
	o.SourceId = v
}

// GetSourceType returns the SourceType field value
func (o *ArtifactWithSourceData) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *ArtifactWithSourceData) SetSourceType(v string) {
	o.SourceType = v
}

// GetCreatedBy returns the CreatedBy field value
func (o *ArtifactWithSourceData) GetCreatedBy() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetCreatedByOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *ArtifactWithSourceData) SetCreatedBy(v User) {
	o.CreatedBy = v
}

// GetRegistrySource returns the RegistrySource field value
func (o *ArtifactWithSourceData) GetRegistrySource() RegistrySource {
	if o == nil {
		var ret RegistrySource
		return ret
	}

	return o.RegistrySource
}

// GetRegistrySourceOk returns a tuple with the RegistrySource field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetRegistrySourceOk() (*RegistrySource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrySource, true
}

// SetRegistrySource sets field value
func (o *ArtifactWithSourceData) SetRegistrySource(v RegistrySource) {
	o.RegistrySource = v
}

// GetGithubSource returns the GithubSource field value
func (o *ArtifactWithSourceData) GetGithubSource() GitHubSource {
	if o == nil {
		var ret GitHubSource
		return ret
	}

	return o.GithubSource
}

// GetGithubSourceOk returns a tuple with the GithubSource field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetGithubSourceOk() (*GitHubSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GithubSource, true
}

// SetGithubSource sets field value
func (o *ArtifactWithSourceData) SetGithubSource(v GitHubSource) {
	o.GithubSource = v
}

// GetGithubSourceData returns the GithubSourceData field value
func (o *ArtifactWithSourceData) GetGithubSourceData() GitHubSourceData {
	if o == nil {
		var ret GitHubSourceData
		return ret
	}

	return o.GithubSourceData
}

// GetGithubSourceDataOk returns a tuple with the GithubSourceData field value
// and a boolean to check if the value has been set.
func (o *ArtifactWithSourceData) GetGithubSourceDataOk() (*GitHubSourceData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GithubSourceData, true
}

// SetGithubSourceData sets field value
func (o *ArtifactWithSourceData) SetGithubSourceData(v GitHubSourceData) {
	o.GithubSourceData = v
}

func (o ArtifactWithSourceData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactWithSourceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["digest"] = o.Digest
	toSerialize["aarch64"] = o.Aarch64
	toSerialize["x86_64"] = o.X8664
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["ready_at"] = o.ReadyAt.Get()
	toSerialize["failed_at"] = o.FailedAt.Get()
	toSerialize["source_id"] = o.SourceId
	toSerialize["source_type"] = o.SourceType
	toSerialize["created_by"] = o.CreatedBy
	toSerialize["registry_source"] = o.RegistrySource
	toSerialize["github_source"] = o.GithubSource
	toSerialize["github_source_data"] = o.GithubSourceData
	return toSerialize, nil
}

func (o *ArtifactWithSourceData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"status",
		"digest",
		"aarch64",
		"x86_64",
		"created_at",
		"ready_at",
		"failed_at",
		"source_id",
		"source_type",
		"created_by",
		"registry_source",
		"github_source",
		"github_source_data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtifactWithSourceData := _ArtifactWithSourceData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtifactWithSourceData)

	if err != nil {
		return err
	}

	*o = ArtifactWithSourceData(varArtifactWithSourceData)

	return err
}

type NullableArtifactWithSourceData struct {
	value *ArtifactWithSourceData
	isSet bool
}

func (v NullableArtifactWithSourceData) Get() *ArtifactWithSourceData {
	return v.value
}

func (v *NullableArtifactWithSourceData) Set(val *ArtifactWithSourceData) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactWithSourceData) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactWithSourceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactWithSourceData(val *ArtifactWithSourceData) *NullableArtifactWithSourceData {
	return &NullableArtifactWithSourceData{value: val, isSet: true}
}

func (v NullableArtifactWithSourceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactWithSourceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


