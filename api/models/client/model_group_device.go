/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GroupDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupDevice{}

// GroupDevice struct for GroupDevice
type GroupDevice struct {
	Object string `json:"object"`
	Id string `json:"id"`
	Name string `json:"name"`
	Hardware string `json:"hardware"`
	OperatingSystem NullableString `json:"operating_system"`
	Architecture NullableString `json:"architecture"`
	Status string `json:"status"`
	LastReportedStatus string `json:"last_reported_status"`
	MiruVersion NullableString `json:"miru_version"`
	CreatedAt time.Time `json:"created_at"`
	SyncedAt time.Time `json:"synced_at"`
	Containers GroupDeviceContainerList `json:"containers"`
	Deployments GroupDeviceDeploymentList `json:"deployments"`
}

type _GroupDevice GroupDevice

// NewGroupDevice instantiates a new GroupDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupDevice(object string, id string, name string, hardware string, operatingSystem NullableString, architecture NullableString, status string, lastReportedStatus string, miruVersion NullableString, createdAt time.Time, syncedAt time.Time, containers GroupDeviceContainerList, deployments GroupDeviceDeploymentList) *GroupDevice {
	this := GroupDevice{}
	this.Object = object
	this.Id = id
	this.Name = name
	this.Hardware = hardware
	this.OperatingSystem = operatingSystem
	this.Architecture = architecture
	this.Status = status
	this.LastReportedStatus = lastReportedStatus
	this.MiruVersion = miruVersion
	this.CreatedAt = createdAt
	this.SyncedAt = syncedAt
	this.Containers = containers
	this.Deployments = deployments
	return &this
}

// NewGroupDeviceWithDefaults instantiates a new GroupDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupDeviceWithDefaults() *GroupDevice {
	this := GroupDevice{}
	return &this
}

// GetObject returns the Object field value
func (o *GroupDevice) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *GroupDevice) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *GroupDevice) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GroupDevice) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *GroupDevice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupDevice) SetName(v string) {
	o.Name = v
}

// GetHardware returns the Hardware field value
func (o *GroupDevice) GetHardware() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetHardwareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hardware, true
}

// SetHardware sets field value
func (o *GroupDevice) SetHardware(v string) {
	o.Hardware = v
}

// GetOperatingSystem returns the OperatingSystem field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupDevice) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem.Get() == nil {
		var ret string
		return ret
	}

	return *o.OperatingSystem.Get()
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupDevice) GetOperatingSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperatingSystem.Get(), o.OperatingSystem.IsSet()
}

// SetOperatingSystem sets field value
func (o *GroupDevice) SetOperatingSystem(v string) {
	o.OperatingSystem.Set(&v)
}

// GetArchitecture returns the Architecture field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupDevice) GetArchitecture() string {
	if o == nil || o.Architecture.Get() == nil {
		var ret string
		return ret
	}

	return *o.Architecture.Get()
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupDevice) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Architecture.Get(), o.Architecture.IsSet()
}

// SetArchitecture sets field value
func (o *GroupDevice) SetArchitecture(v string) {
	o.Architecture.Set(&v)
}

// GetStatus returns the Status field value
func (o *GroupDevice) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GroupDevice) SetStatus(v string) {
	o.Status = v
}

// GetLastReportedStatus returns the LastReportedStatus field value
func (o *GroupDevice) GetLastReportedStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastReportedStatus
}

// GetLastReportedStatusOk returns a tuple with the LastReportedStatus field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetLastReportedStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastReportedStatus, true
}

// SetLastReportedStatus sets field value
func (o *GroupDevice) SetLastReportedStatus(v string) {
	o.LastReportedStatus = v
}

// GetMiruVersion returns the MiruVersion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GroupDevice) GetMiruVersion() string {
	if o == nil || o.MiruVersion.Get() == nil {
		var ret string
		return ret
	}

	return *o.MiruVersion.Get()
}

// GetMiruVersionOk returns a tuple with the MiruVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupDevice) GetMiruVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MiruVersion.Get(), o.MiruVersion.IsSet()
}

// SetMiruVersion sets field value
func (o *GroupDevice) SetMiruVersion(v string) {
	o.MiruVersion.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *GroupDevice) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *GroupDevice) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSyncedAt returns the SyncedAt field value
func (o *GroupDevice) GetSyncedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.SyncedAt
}

// GetSyncedAtOk returns a tuple with the SyncedAt field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetSyncedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncedAt, true
}

// SetSyncedAt sets field value
func (o *GroupDevice) SetSyncedAt(v time.Time) {
	o.SyncedAt = v
}

// GetContainers returns the Containers field value
func (o *GroupDevice) GetContainers() GroupDeviceContainerList {
	if o == nil {
		var ret GroupDeviceContainerList
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetContainersOk() (*GroupDeviceContainerList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Containers, true
}

// SetContainers sets field value
func (o *GroupDevice) SetContainers(v GroupDeviceContainerList) {
	o.Containers = v
}

// GetDeployments returns the Deployments field value
func (o *GroupDevice) GetDeployments() GroupDeviceDeploymentList {
	if o == nil {
		var ret GroupDeviceDeploymentList
		return ret
	}

	return o.Deployments
}

// GetDeploymentsOk returns a tuple with the Deployments field value
// and a boolean to check if the value has been set.
func (o *GroupDevice) GetDeploymentsOk() (*GroupDeviceDeploymentList, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deployments, true
}

// SetDeployments sets field value
func (o *GroupDevice) SetDeployments(v GroupDeviceDeploymentList) {
	o.Deployments = v
}

func (o GroupDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["hardware"] = o.Hardware
	toSerialize["operating_system"] = o.OperatingSystem.Get()
	toSerialize["architecture"] = o.Architecture.Get()
	toSerialize["status"] = o.Status
	toSerialize["last_reported_status"] = o.LastReportedStatus
	toSerialize["miru_version"] = o.MiruVersion.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["synced_at"] = o.SyncedAt
	toSerialize["containers"] = o.Containers
	toSerialize["deployments"] = o.Deployments
	return toSerialize, nil
}

func (o *GroupDevice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"name",
		"hardware",
		"operating_system",
		"architecture",
		"status",
		"last_reported_status",
		"miru_version",
		"created_at",
		"synced_at",
		"containers",
		"deployments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGroupDevice := _GroupDevice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGroupDevice)

	if err != nil {
		return err
	}

	*o = GroupDevice(varGroupDevice)

	return err
}

type NullableGroupDevice struct {
	value *GroupDevice
	isSet bool
}

func (v NullableGroupDevice) Get() *GroupDevice {
	return v.value
}

func (v *NullableGroupDevice) Set(val *GroupDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupDevice(val *GroupDevice) *NullableGroupDevice {
	return &NullableGroupDevice{value: val, isSet: true}
}

func (v NullableGroupDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


