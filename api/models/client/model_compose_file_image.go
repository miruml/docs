/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ComposeFileImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComposeFileImage{}

// ComposeFileImage struct for ComposeFileImage
type ComposeFileImage struct {
	Object string `json:"object"`
	Digest string `json:"digest"`
	Tags []string `json:"tags"`
	Uri string `json:"uri"`
	Bytes NullableInt64 `json:"bytes"`
	UploadedAt time.Time `json:"uploaded_at"`
	IsValid bool `json:"is_valid"`
}

type _ComposeFileImage ComposeFileImage

// NewComposeFileImage instantiates a new ComposeFileImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComposeFileImage(object string, digest string, tags []string, uri string, bytes NullableInt64, uploadedAt time.Time, isValid bool) *ComposeFileImage {
	this := ComposeFileImage{}
	this.Object = object
	this.Digest = digest
	this.Tags = tags
	this.Uri = uri
	this.Bytes = bytes
	this.UploadedAt = uploadedAt
	this.IsValid = isValid
	return &this
}

// NewComposeFileImageWithDefaults instantiates a new ComposeFileImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComposeFileImageWithDefaults() *ComposeFileImage {
	this := ComposeFileImage{}
	return &this
}

// GetObject returns the Object field value
func (o *ComposeFileImage) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ComposeFileImage) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ComposeFileImage) SetObject(v string) {
	o.Object = v
}

// GetDigest returns the Digest field value
func (o *ComposeFileImage) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *ComposeFileImage) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *ComposeFileImage) SetDigest(v string) {
	o.Digest = v
}

// GetTags returns the Tags field value
func (o *ComposeFileImage) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ComposeFileImage) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ComposeFileImage) SetTags(v []string) {
	o.Tags = v
}

// GetUri returns the Uri field value
func (o *ComposeFileImage) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *ComposeFileImage) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *ComposeFileImage) SetUri(v string) {
	o.Uri = v
}

// GetBytes returns the Bytes field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ComposeFileImage) GetBytes() int64 {
	if o == nil || o.Bytes.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Bytes.Get()
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComposeFileImage) GetBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bytes.Get(), o.Bytes.IsSet()
}

// SetBytes sets field value
func (o *ComposeFileImage) SetBytes(v int64) {
	o.Bytes.Set(&v)
}

// GetUploadedAt returns the UploadedAt field value
func (o *ComposeFileImage) GetUploadedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value
// and a boolean to check if the value has been set.
func (o *ComposeFileImage) GetUploadedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedAt, true
}

// SetUploadedAt sets field value
func (o *ComposeFileImage) SetUploadedAt(v time.Time) {
	o.UploadedAt = v
}

// GetIsValid returns the IsValid field value
func (o *ComposeFileImage) GetIsValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsValid
}

// GetIsValidOk returns a tuple with the IsValid field value
// and a boolean to check if the value has been set.
func (o *ComposeFileImage) GetIsValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsValid, true
}

// SetIsValid sets field value
func (o *ComposeFileImage) SetIsValid(v bool) {
	o.IsValid = v
}

func (o ComposeFileImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComposeFileImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["digest"] = o.Digest
	toSerialize["tags"] = o.Tags
	toSerialize["uri"] = o.Uri
	toSerialize["bytes"] = o.Bytes.Get()
	toSerialize["uploaded_at"] = o.UploadedAt
	toSerialize["is_valid"] = o.IsValid
	return toSerialize, nil
}

func (o *ComposeFileImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"digest",
		"tags",
		"uri",
		"bytes",
		"uploaded_at",
		"is_valid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComposeFileImage := _ComposeFileImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComposeFileImage)

	if err != nil {
		return err
	}

	*o = ComposeFileImage(varComposeFileImage)

	return err
}

type NullableComposeFileImage struct {
	value *ComposeFileImage
	isSet bool
}

func (v NullableComposeFileImage) Get() *ComposeFileImage {
	return v.value
}

func (v *NullableComposeFileImage) Set(val *ComposeFileImage) {
	v.value = val
	v.isSet = true
}

func (v NullableComposeFileImage) IsSet() bool {
	return v.isSet
}

func (v *NullableComposeFileImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComposeFileImage(val *ComposeFileImage) *NullableComposeFileImage {
	return &NullableComposeFileImage{value: val, isSet: true}
}

func (v NullableComposeFileImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComposeFileImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


