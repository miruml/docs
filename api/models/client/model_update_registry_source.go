/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateRegistrySource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRegistrySource{}

// UpdateRegistrySource struct for UpdateRegistrySource
type UpdateRegistrySource struct {
	Name string `json:"name"`
	ComposeFile string `json:"compose_file"`
	ExtraRepositories UpdateRegistrySourceExtraRepositories `json:"extra_repositories"`
	Aarch64 bool `json:"aarch64"`
	X8664 bool `json:"x86_64"`
}

type _UpdateRegistrySource UpdateRegistrySource

// NewUpdateRegistrySource instantiates a new UpdateRegistrySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRegistrySource(name string, composeFile string, extraRepositories UpdateRegistrySourceExtraRepositories, aarch64 bool, x8664 bool) *UpdateRegistrySource {
	this := UpdateRegistrySource{}
	this.Name = name
	this.ComposeFile = composeFile
	this.ExtraRepositories = extraRepositories
	this.Aarch64 = aarch64
	this.X8664 = x8664
	return &this
}

// NewUpdateRegistrySourceWithDefaults instantiates a new UpdateRegistrySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRegistrySourceWithDefaults() *UpdateRegistrySource {
	this := UpdateRegistrySource{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateRegistrySource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateRegistrySource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateRegistrySource) SetName(v string) {
	o.Name = v
}

// GetComposeFile returns the ComposeFile field value
func (o *UpdateRegistrySource) GetComposeFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComposeFile
}

// GetComposeFileOk returns a tuple with the ComposeFile field value
// and a boolean to check if the value has been set.
func (o *UpdateRegistrySource) GetComposeFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComposeFile, true
}

// SetComposeFile sets field value
func (o *UpdateRegistrySource) SetComposeFile(v string) {
	o.ComposeFile = v
}

// GetExtraRepositories returns the ExtraRepositories field value
func (o *UpdateRegistrySource) GetExtraRepositories() UpdateRegistrySourceExtraRepositories {
	if o == nil {
		var ret UpdateRegistrySourceExtraRepositories
		return ret
	}

	return o.ExtraRepositories
}

// GetExtraRepositoriesOk returns a tuple with the ExtraRepositories field value
// and a boolean to check if the value has been set.
func (o *UpdateRegistrySource) GetExtraRepositoriesOk() (*UpdateRegistrySourceExtraRepositories, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtraRepositories, true
}

// SetExtraRepositories sets field value
func (o *UpdateRegistrySource) SetExtraRepositories(v UpdateRegistrySourceExtraRepositories) {
	o.ExtraRepositories = v
}

// GetAarch64 returns the Aarch64 field value
func (o *UpdateRegistrySource) GetAarch64() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Aarch64
}

// GetAarch64Ok returns a tuple with the Aarch64 field value
// and a boolean to check if the value has been set.
func (o *UpdateRegistrySource) GetAarch64Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Aarch64, true
}

// SetAarch64 sets field value
func (o *UpdateRegistrySource) SetAarch64(v bool) {
	o.Aarch64 = v
}

// GetX8664 returns the X8664 field value
func (o *UpdateRegistrySource) GetX8664() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.X8664
}

// GetX8664Ok returns a tuple with the X8664 field value
// and a boolean to check if the value has been set.
func (o *UpdateRegistrySource) GetX8664Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.X8664, true
}

// SetX8664 sets field value
func (o *UpdateRegistrySource) SetX8664(v bool) {
	o.X8664 = v
}

func (o UpdateRegistrySource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRegistrySource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["compose_file"] = o.ComposeFile
	toSerialize["extra_repositories"] = o.ExtraRepositories
	toSerialize["aarch64"] = o.Aarch64
	toSerialize["x86_64"] = o.X8664
	return toSerialize, nil
}

func (o *UpdateRegistrySource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"compose_file",
		"extra_repositories",
		"aarch64",
		"x86_64",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRegistrySource := _UpdateRegistrySource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateRegistrySource)

	if err != nil {
		return err
	}

	*o = UpdateRegistrySource(varUpdateRegistrySource)

	return err
}

type NullableUpdateRegistrySource struct {
	value *UpdateRegistrySource
	isSet bool
}

func (v NullableUpdateRegistrySource) Get() *UpdateRegistrySource {
	return v.value
}

func (v *NullableUpdateRegistrySource) Set(val *UpdateRegistrySource) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRegistrySource) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRegistrySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRegistrySource(val *UpdateRegistrySource) *NullableUpdateRegistrySource {
	return &NullableUpdateRegistrySource{value: val, isSet: true}
}

func (v NullableUpdateRegistrySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRegistrySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


