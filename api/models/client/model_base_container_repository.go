/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BaseContainerRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseContainerRepository{}

// BaseContainerRepository struct for BaseContainerRepository
type BaseContainerRepository struct {
	RegistryUrl string `json:"registry_url"`
	Name string `json:"name"`
	Uri string `json:"uri"`
	Type ContainerRepositoryType `json:"type"`
}

type _BaseContainerRepository BaseContainerRepository

// NewBaseContainerRepository instantiates a new BaseContainerRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseContainerRepository(registryUrl string, name string, uri string, type_ ContainerRepositoryType) *BaseContainerRepository {
	this := BaseContainerRepository{}
	this.RegistryUrl = registryUrl
	this.Name = name
	this.Uri = uri
	this.Type = type_
	return &this
}

// NewBaseContainerRepositoryWithDefaults instantiates a new BaseContainerRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseContainerRepositoryWithDefaults() *BaseContainerRepository {
	this := BaseContainerRepository{}
	return &this
}

// GetRegistryUrl returns the RegistryUrl field value
func (o *BaseContainerRepository) GetRegistryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value
// and a boolean to check if the value has been set.
func (o *BaseContainerRepository) GetRegistryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryUrl, true
}

// SetRegistryUrl sets field value
func (o *BaseContainerRepository) SetRegistryUrl(v string) {
	o.RegistryUrl = v
}

// GetName returns the Name field value
func (o *BaseContainerRepository) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseContainerRepository) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseContainerRepository) SetName(v string) {
	o.Name = v
}

// GetUri returns the Uri field value
func (o *BaseContainerRepository) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *BaseContainerRepository) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *BaseContainerRepository) SetUri(v string) {
	o.Uri = v
}

// GetType returns the Type field value
func (o *BaseContainerRepository) GetType() ContainerRepositoryType {
	if o == nil {
		var ret ContainerRepositoryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseContainerRepository) GetTypeOk() (*ContainerRepositoryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseContainerRepository) SetType(v ContainerRepositoryType) {
	o.Type = v
}

func (o BaseContainerRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseContainerRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registry_url"] = o.RegistryUrl
	toSerialize["name"] = o.Name
	toSerialize["uri"] = o.Uri
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *BaseContainerRepository) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registry_url",
		"name",
		"uri",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseContainerRepository := _BaseContainerRepository{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseContainerRepository)

	if err != nil {
		return err
	}

	*o = BaseContainerRepository(varBaseContainerRepository)

	return err
}

type NullableBaseContainerRepository struct {
	value *BaseContainerRepository
	isSet bool
}

func (v NullableBaseContainerRepository) Get() *BaseContainerRepository {
	return v.value
}

func (v *NullableBaseContainerRepository) Set(val *BaseContainerRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseContainerRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseContainerRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseContainerRepository(val *BaseContainerRepository) *NullableBaseContainerRepository {
	return &NullableBaseContainerRepository{value: val, isSet: true}
}

func (v NullableBaseContainerRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseContainerRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


