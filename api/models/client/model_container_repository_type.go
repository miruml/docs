/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ContainerRepositoryType the model 'ContainerRepositoryType'
type ContainerRepositoryType string

// List of ContainerRepositoryType
const (
	GAR ContainerRepositoryType = "gar"
	DOCKERHUB ContainerRepositoryType = "dockerhub"
)

// All allowed values of ContainerRepositoryType enum
var AllowedContainerRepositoryTypeEnumValues = []ContainerRepositoryType{
	"gar",
	"dockerhub",
}

func (v *ContainerRepositoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ContainerRepositoryType(value)
	for _, existing := range AllowedContainerRepositoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ContainerRepositoryType", value)
}

// NewContainerRepositoryTypeFromValue returns a pointer to a valid ContainerRepositoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewContainerRepositoryTypeFromValue(v string) (*ContainerRepositoryType, error) {
	ev := ContainerRepositoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ContainerRepositoryType: valid values are %v", v, AllowedContainerRepositoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ContainerRepositoryType) IsValid() bool {
	for _, existing := range AllowedContainerRepositoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ContainerRepositoryType value
func (v ContainerRepositoryType) Ptr() *ContainerRepositoryType {
	return &v
}

type NullableContainerRepositoryType struct {
	value *ContainerRepositoryType
	isSet bool
}

func (v NullableContainerRepositoryType) Get() *ContainerRepositoryType {
	return v.value
}

func (v *NullableContainerRepositoryType) Set(val *ContainerRepositoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerRepositoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerRepositoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerRepositoryType(val *ContainerRepositoryType) *NullableContainerRepositoryType {
	return &NullableContainerRepositoryType{value: val, isSet: true}
}

func (v NullableContainerRepositoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerRepositoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

