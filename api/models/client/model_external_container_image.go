/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ExternalContainerImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalContainerImage{}

// ExternalContainerImage struct for ExternalContainerImage
type ExternalContainerImage struct {
	Object string `json:"object"`
	Digest string `json:"digest"`
	Tags []string `json:"tags"`
	Uri string `json:"uri"`
	Bytes NullableInt64 `json:"bytes"`
	UploadedAt time.Time `json:"uploaded_at"`
}

type _ExternalContainerImage ExternalContainerImage

// NewExternalContainerImage instantiates a new ExternalContainerImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalContainerImage(object string, digest string, tags []string, uri string, bytes NullableInt64, uploadedAt time.Time) *ExternalContainerImage {
	this := ExternalContainerImage{}
	this.Object = object
	this.Digest = digest
	this.Tags = tags
	this.Uri = uri
	this.Bytes = bytes
	this.UploadedAt = uploadedAt
	return &this
}

// NewExternalContainerImageWithDefaults instantiates a new ExternalContainerImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalContainerImageWithDefaults() *ExternalContainerImage {
	this := ExternalContainerImage{}
	return &this
}

// GetObject returns the Object field value
func (o *ExternalContainerImage) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ExternalContainerImage) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ExternalContainerImage) SetObject(v string) {
	o.Object = v
}

// GetDigest returns the Digest field value
func (o *ExternalContainerImage) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *ExternalContainerImage) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *ExternalContainerImage) SetDigest(v string) {
	o.Digest = v
}

// GetTags returns the Tags field value
func (o *ExternalContainerImage) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ExternalContainerImage) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ExternalContainerImage) SetTags(v []string) {
	o.Tags = v
}

// GetUri returns the Uri field value
func (o *ExternalContainerImage) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *ExternalContainerImage) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *ExternalContainerImage) SetUri(v string) {
	o.Uri = v
}

// GetBytes returns the Bytes field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ExternalContainerImage) GetBytes() int64 {
	if o == nil || o.Bytes.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Bytes.Get()
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalContainerImage) GetBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bytes.Get(), o.Bytes.IsSet()
}

// SetBytes sets field value
func (o *ExternalContainerImage) SetBytes(v int64) {
	o.Bytes.Set(&v)
}

// GetUploadedAt returns the UploadedAt field value
func (o *ExternalContainerImage) GetUploadedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value
// and a boolean to check if the value has been set.
func (o *ExternalContainerImage) GetUploadedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedAt, true
}

// SetUploadedAt sets field value
func (o *ExternalContainerImage) SetUploadedAt(v time.Time) {
	o.UploadedAt = v
}

func (o ExternalContainerImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalContainerImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["digest"] = o.Digest
	toSerialize["tags"] = o.Tags
	toSerialize["uri"] = o.Uri
	toSerialize["bytes"] = o.Bytes.Get()
	toSerialize["uploaded_at"] = o.UploadedAt
	return toSerialize, nil
}

func (o *ExternalContainerImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"digest",
		"tags",
		"uri",
		"bytes",
		"uploaded_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalContainerImage := _ExternalContainerImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalContainerImage)

	if err != nil {
		return err
	}

	*o = ExternalContainerImage(varExternalContainerImage)

	return err
}

type NullableExternalContainerImage struct {
	value *ExternalContainerImage
	isSet bool
}

func (v NullableExternalContainerImage) Get() *ExternalContainerImage {
	return v.value
}

func (v *NullableExternalContainerImage) Set(val *ExternalContainerImage) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalContainerImage) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalContainerImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalContainerImage(val *ExternalContainerImage) *NullableExternalContainerImage {
	return &NullableExternalContainerImage{value: val, isSet: true}
}

func (v NullableExternalContainerImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalContainerImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


