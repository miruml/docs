/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GitHubCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitHubCommit{}

// GitHubCommit struct for GitHubCommit
type GitHubCommit struct {
	Object string `json:"object"`
	Sha string `json:"sha"`
	Message string `json:"message"`
	HtmlUrl string `json:"html_url"`
	PushedAt time.Time `json:"pushed_at"`
	Committer GitHubCommitter `json:"committer"`
}

type _GitHubCommit GitHubCommit

// NewGitHubCommit instantiates a new GitHubCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitHubCommit(object string, sha string, message string, htmlUrl string, pushedAt time.Time, committer GitHubCommitter) *GitHubCommit {
	this := GitHubCommit{}
	this.Object = object
	this.Sha = sha
	this.Message = message
	this.HtmlUrl = htmlUrl
	this.PushedAt = pushedAt
	this.Committer = committer
	return &this
}

// NewGitHubCommitWithDefaults instantiates a new GitHubCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitHubCommitWithDefaults() *GitHubCommit {
	this := GitHubCommit{}
	return &this
}

// GetObject returns the Object field value
func (o *GitHubCommit) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *GitHubCommit) SetObject(v string) {
	o.Object = v
}

// GetSha returns the Sha field value
func (o *GitHubCommit) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *GitHubCommit) SetSha(v string) {
	o.Sha = v
}

// GetMessage returns the Message field value
func (o *GitHubCommit) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GitHubCommit) SetMessage(v string) {
	o.Message = v
}

// GetHtmlUrl returns the HtmlUrl field value
func (o *GitHubCommit) GetHtmlUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetHtmlUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HtmlUrl, true
}

// SetHtmlUrl sets field value
func (o *GitHubCommit) SetHtmlUrl(v string) {
	o.HtmlUrl = v
}

// GetPushedAt returns the PushedAt field value
func (o *GitHubCommit) GetPushedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PushedAt
}

// GetPushedAtOk returns a tuple with the PushedAt field value
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetPushedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PushedAt, true
}

// SetPushedAt sets field value
func (o *GitHubCommit) SetPushedAt(v time.Time) {
	o.PushedAt = v
}

// GetCommitter returns the Committer field value
func (o *GitHubCommit) GetCommitter() GitHubCommitter {
	if o == nil {
		var ret GitHubCommitter
		return ret
	}

	return o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetCommitterOk() (*GitHubCommitter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Committer, true
}

// SetCommitter sets field value
func (o *GitHubCommit) SetCommitter(v GitHubCommitter) {
	o.Committer = v
}

func (o GitHubCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitHubCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["sha"] = o.Sha
	toSerialize["message"] = o.Message
	toSerialize["html_url"] = o.HtmlUrl
	toSerialize["pushed_at"] = o.PushedAt
	toSerialize["committer"] = o.Committer
	return toSerialize, nil
}

func (o *GitHubCommit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"sha",
		"message",
		"html_url",
		"pushed_at",
		"committer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitHubCommit := _GitHubCommit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitHubCommit)

	if err != nil {
		return err
	}

	*o = GitHubCommit(varGitHubCommit)

	return err
}

type NullableGitHubCommit struct {
	value *GitHubCommit
	isSet bool
}

func (v NullableGitHubCommit) Get() *GitHubCommit {
	return v.value
}

func (v *NullableGitHubCommit) Set(val *GitHubCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGitHubCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGitHubCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitHubCommit(val *GitHubCommit) *NullableGitHubCommit {
	return &NullableGitHubCommit{value: val, isSet: true}
}

func (v NullableGitHubCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitHubCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


