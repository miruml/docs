/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GitHubCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitHubCommit{}

// GitHubCommit struct for GitHubCommit
type GitHubCommit struct {
	Object *string `json:"object,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Message *string `json:"message,omitempty"`
	HtmlUrl *string `json:"html_url,omitempty"`
	Committer *GitHubCommitter `json:"committer,omitempty"`
}

// NewGitHubCommit instantiates a new GitHubCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitHubCommit() *GitHubCommit {
	this := GitHubCommit{}
	return &this
}

// NewGitHubCommitWithDefaults instantiates a new GitHubCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitHubCommitWithDefaults() *GitHubCommit {
	this := GitHubCommit{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *GitHubCommit) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *GitHubCommit) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *GitHubCommit) SetObject(v string) {
	o.Object = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GitHubCommit) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GitHubCommit) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GitHubCommit) SetSha(v string) {
	o.Sha = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GitHubCommit) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GitHubCommit) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GitHubCommit) SetMessage(v string) {
	o.Message = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *GitHubCommit) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *GitHubCommit) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *GitHubCommit) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *GitHubCommit) GetCommitter() GitHubCommitter {
	if o == nil || IsNil(o.Committer) {
		var ret GitHubCommitter
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitHubCommit) GetCommitterOk() (*GitHubCommitter, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *GitHubCommit) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given GitHubCommitter and assigns it to the Committer field.
func (o *GitHubCommit) SetCommitter(v GitHubCommitter) {
	o.Committer = &v
}

func (o GitHubCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitHubCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	return toSerialize, nil
}

type NullableGitHubCommit struct {
	value *GitHubCommit
	isSet bool
}

func (v NullableGitHubCommit) Get() *GitHubCommit {
	return v.value
}

func (v *NullableGitHubCommit) Set(val *GitHubCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGitHubCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGitHubCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitHubCommit(val *GitHubCommit) *NullableGitHubCommit {
	return &NullableGitHubCommit{value: val, isSet: true}
}

func (v NullableGitHubCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitHubCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


