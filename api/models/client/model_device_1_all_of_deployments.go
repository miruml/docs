/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Device1AllOfDeployments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device1AllOfDeployments{}

// Device1AllOfDeployments struct for Device1AllOfDeployments
type Device1AllOfDeployments struct {
	Object string `json:"object"`
	Data []BaseDeployment `json:"data"`
}

type _Device1AllOfDeployments Device1AllOfDeployments

// NewDevice1AllOfDeployments instantiates a new Device1AllOfDeployments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice1AllOfDeployments(object string, data []BaseDeployment) *Device1AllOfDeployments {
	this := Device1AllOfDeployments{}
	this.Object = object
	this.Data = data
	return &this
}

// NewDevice1AllOfDeploymentsWithDefaults instantiates a new Device1AllOfDeployments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevice1AllOfDeploymentsWithDefaults() *Device1AllOfDeployments {
	this := Device1AllOfDeployments{}
	return &this
}

// GetObject returns the Object field value
func (o *Device1AllOfDeployments) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Device1AllOfDeployments) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Device1AllOfDeployments) SetObject(v string) {
	o.Object = v
}

// GetData returns the Data field value
func (o *Device1AllOfDeployments) GetData() []BaseDeployment {
	if o == nil {
		var ret []BaseDeployment
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Device1AllOfDeployments) GetDataOk() ([]BaseDeployment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Device1AllOfDeployments) SetData(v []BaseDeployment) {
	o.Data = v
}

func (o Device1AllOfDeployments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device1AllOfDeployments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *Device1AllOfDeployments) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice1AllOfDeployments := _Device1AllOfDeployments{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevice1AllOfDeployments)

	if err != nil {
		return err
	}

	*o = Device1AllOfDeployments(varDevice1AllOfDeployments)

	return err
}

type NullableDevice1AllOfDeployments struct {
	value *Device1AllOfDeployments
	isSet bool
}

func (v NullableDevice1AllOfDeployments) Get() *Device1AllOfDeployments {
	return v.value
}

func (v *NullableDevice1AllOfDeployments) Set(val *Device1AllOfDeployments) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice1AllOfDeployments) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice1AllOfDeployments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice1AllOfDeployments(val *Device1AllOfDeployments) *NullableDevice1AllOfDeployments {
	return &NullableDevice1AllOfDeployments{value: val, isSet: true}
}

func (v NullableDevice1AllOfDeployments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice1AllOfDeployments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


