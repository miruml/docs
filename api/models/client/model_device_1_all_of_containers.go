/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Device1AllOfContainers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device1AllOfContainers{}

// Device1AllOfContainers struct for Device1AllOfContainers
type Device1AllOfContainers struct {
	Object string `json:"object"`
	Data []Container `json:"data"`
}

type _Device1AllOfContainers Device1AllOfContainers

// NewDevice1AllOfContainers instantiates a new Device1AllOfContainers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice1AllOfContainers(object string, data []Container) *Device1AllOfContainers {
	this := Device1AllOfContainers{}
	this.Object = object
	this.Data = data
	return &this
}

// NewDevice1AllOfContainersWithDefaults instantiates a new Device1AllOfContainers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevice1AllOfContainersWithDefaults() *Device1AllOfContainers {
	this := Device1AllOfContainers{}
	return &this
}

// GetObject returns the Object field value
func (o *Device1AllOfContainers) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Device1AllOfContainers) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Device1AllOfContainers) SetObject(v string) {
	o.Object = v
}

// GetData returns the Data field value
func (o *Device1AllOfContainers) GetData() []Container {
	if o == nil {
		var ret []Container
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Device1AllOfContainers) GetDataOk() ([]Container, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Device1AllOfContainers) SetData(v []Container) {
	o.Data = v
}

func (o Device1AllOfContainers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device1AllOfContainers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *Device1AllOfContainers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice1AllOfContainers := _Device1AllOfContainers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevice1AllOfContainers)

	if err != nil {
		return err
	}

	*o = Device1AllOfContainers(varDevice1AllOfContainers)

	return err
}

type NullableDevice1AllOfContainers struct {
	value *Device1AllOfContainers
	isSet bool
}

func (v NullableDevice1AllOfContainers) Get() *Device1AllOfContainers {
	return v.value
}

func (v *NullableDevice1AllOfContainers) Set(val *Device1AllOfContainers) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice1AllOfContainers) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice1AllOfContainers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice1AllOfContainers(val *Device1AllOfContainers) *NullableDevice1AllOfContainers {
	return &NullableDevice1AllOfContainers{value: val, isSet: true}
}

func (v NullableDevice1AllOfContainers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice1AllOfContainers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


