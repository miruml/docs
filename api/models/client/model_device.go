/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Device type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Device{}

// Device struct for Device
type Device struct {
	Object string `json:"object"`
	Id string `json:"id"`
	Name string `json:"name"`
	Hardware string `json:"hardware"`
	OperatingSystem NullableString `json:"operating_system"`
	Architecture NullableString `json:"architecture"`
	Status string `json:"status"`
	MiruVersion string `json:"miru_version"`
	CreatedAt time.Time `json:"created_at"`
	SyncedAt time.Time `json:"synced_at"`
	Group Group `json:"group"`
}

type _Device Device

// NewDevice instantiates a new Device object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevice(object string, id string, name string, hardware string, operatingSystem NullableString, architecture NullableString, status string, miruVersion string, createdAt time.Time, syncedAt time.Time, group Group) *Device {
	this := Device{}
	this.Object = object
	this.Id = id
	this.Name = name
	this.Hardware = hardware
	this.OperatingSystem = operatingSystem
	this.Architecture = architecture
	this.Status = status
	this.MiruVersion = miruVersion
	this.CreatedAt = createdAt
	this.SyncedAt = syncedAt
	this.Group = group
	return &this
}

// NewDeviceWithDefaults instantiates a new Device object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithDefaults() *Device {
	this := Device{}
	return &this
}

// GetObject returns the Object field value
func (o *Device) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Device) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Device) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Device) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Device) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Device) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Device) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Device) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Device) SetName(v string) {
	o.Name = v
}

// GetHardware returns the Hardware field value
func (o *Device) GetHardware() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hardware
}

// GetHardwareOk returns a tuple with the Hardware field value
// and a boolean to check if the value has been set.
func (o *Device) GetHardwareOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hardware, true
}

// SetHardware sets field value
func (o *Device) SetHardware(v string) {
	o.Hardware = v
}

// GetOperatingSystem returns the OperatingSystem field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Device) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem.Get() == nil {
		var ret string
		return ret
	}

	return *o.OperatingSystem.Get()
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetOperatingSystemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperatingSystem.Get(), o.OperatingSystem.IsSet()
}

// SetOperatingSystem sets field value
func (o *Device) SetOperatingSystem(v string) {
	o.OperatingSystem.Set(&v)
}

// GetArchitecture returns the Architecture field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Device) GetArchitecture() string {
	if o == nil || o.Architecture.Get() == nil {
		var ret string
		return ret
	}

	return *o.Architecture.Get()
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Device) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Architecture.Get(), o.Architecture.IsSet()
}

// SetArchitecture sets field value
func (o *Device) SetArchitecture(v string) {
	o.Architecture.Set(&v)
}

// GetStatus returns the Status field value
func (o *Device) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Device) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Device) SetStatus(v string) {
	o.Status = v
}

// GetMiruVersion returns the MiruVersion field value
func (o *Device) GetMiruVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MiruVersion
}

// GetMiruVersionOk returns a tuple with the MiruVersion field value
// and a boolean to check if the value has been set.
func (o *Device) GetMiruVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MiruVersion, true
}

// SetMiruVersion sets field value
func (o *Device) SetMiruVersion(v string) {
	o.MiruVersion = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Device) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Device) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Device) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSyncedAt returns the SyncedAt field value
func (o *Device) GetSyncedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.SyncedAt
}

// GetSyncedAtOk returns a tuple with the SyncedAt field value
// and a boolean to check if the value has been set.
func (o *Device) GetSyncedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncedAt, true
}

// SetSyncedAt sets field value
func (o *Device) SetSyncedAt(v time.Time) {
	o.SyncedAt = v
}

// GetGroup returns the Group field value
func (o *Device) GetGroup() Group {
	if o == nil {
		var ret Group
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *Device) GetGroupOk() (*Group, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *Device) SetGroup(v Group) {
	o.Group = v
}

func (o Device) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Device) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["hardware"] = o.Hardware
	toSerialize["operating_system"] = o.OperatingSystem.Get()
	toSerialize["architecture"] = o.Architecture.Get()
	toSerialize["status"] = o.Status
	toSerialize["miru_version"] = o.MiruVersion
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["synced_at"] = o.SyncedAt
	toSerialize["group"] = o.Group
	return toSerialize, nil
}

func (o *Device) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"name",
		"hardware",
		"operating_system",
		"architecture",
		"status",
		"miru_version",
		"created_at",
		"synced_at",
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevice := _Device{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevice)

	if err != nil {
		return err
	}

	*o = Device(varDevice)

	return err
}

type NullableDevice struct {
	value *Device
	isSet bool
}

func (v NullableDevice) Get() *Device {
	return v.value
}

func (v *NullableDevice) Set(val *Device) {
	v.value = val
	v.isSet = true
}

func (v NullableDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevice(val *Device) *NullableDevice {
	return &NullableDevice{value: val, isSet: true}
}

func (v NullableDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


