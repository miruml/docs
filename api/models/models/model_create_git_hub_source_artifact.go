/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateGitHubSourceArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGitHubSourceArtifact{}

// CreateGitHubSourceArtifact struct for CreateGitHubSourceArtifact
type CreateGitHubSourceArtifact struct {
	CommitId string `json:"commit_id"`
}

type _CreateGitHubSourceArtifact CreateGitHubSourceArtifact

// NewCreateGitHubSourceArtifact instantiates a new CreateGitHubSourceArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGitHubSourceArtifact(commitId string) *CreateGitHubSourceArtifact {
	this := CreateGitHubSourceArtifact{}
	this.CommitId = commitId
	return &this
}

// NewCreateGitHubSourceArtifactWithDefaults instantiates a new CreateGitHubSourceArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGitHubSourceArtifactWithDefaults() *CreateGitHubSourceArtifact {
	this := CreateGitHubSourceArtifact{}
	return &this
}

// GetCommitId returns the CommitId field value
func (o *CreateGitHubSourceArtifact) GetCommitId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitId
}

// GetCommitIdOk returns a tuple with the CommitId field value
// and a boolean to check if the value has been set.
func (o *CreateGitHubSourceArtifact) GetCommitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitId, true
}

// SetCommitId sets field value
func (o *CreateGitHubSourceArtifact) SetCommitId(v string) {
	o.CommitId = v
}

func (o CreateGitHubSourceArtifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGitHubSourceArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commit_id"] = o.CommitId
	return toSerialize, nil
}

func (o *CreateGitHubSourceArtifact) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commit_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGitHubSourceArtifact := _CreateGitHubSourceArtifact{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGitHubSourceArtifact)

	if err != nil {
		return err
	}

	*o = CreateGitHubSourceArtifact(varCreateGitHubSourceArtifact)

	return err
}

type NullableCreateGitHubSourceArtifact struct {
	value *CreateGitHubSourceArtifact
	isSet bool
}

func (v NullableCreateGitHubSourceArtifact) Get() *CreateGitHubSourceArtifact {
	return v.value
}

func (v *NullableCreateGitHubSourceArtifact) Set(val *CreateGitHubSourceArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGitHubSourceArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGitHubSourceArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGitHubSourceArtifact(val *CreateGitHubSourceArtifact) *NullableCreateGitHubSourceArtifact {
	return &NullableCreateGitHubSourceArtifact{value: val, isSet: true}
}

func (v NullableCreateGitHubSourceArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGitHubSourceArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


