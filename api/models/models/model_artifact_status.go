/*
Miru API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ArtifactStatus the model 'ArtifactStatus'
type ArtifactStatus string

// List of ArtifactStatus
const (
	QUEUED ArtifactStatus = "queued"
	VERIFYING ArtifactStatus = "verifying"
	BUILDING ArtifactStatus = "building"
	STORING ArtifactStatus = "storing"
	READY ArtifactStatus = "ready"
	FAILED ArtifactStatus = "failed"
)

// All allowed values of ArtifactStatus enum
var AllowedArtifactStatusEnumValues = []ArtifactStatus{
	"queued",
	"verifying",
	"building",
	"storing",
	"ready",
	"failed",
}

func (v *ArtifactStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ArtifactStatus(value)
	for _, existing := range AllowedArtifactStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ArtifactStatus", value)
}

// NewArtifactStatusFromValue returns a pointer to a valid ArtifactStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArtifactStatusFromValue(v string) (*ArtifactStatus, error) {
	ev := ArtifactStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ArtifactStatus: valid values are %v", v, AllowedArtifactStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ArtifactStatus) IsValid() bool {
	for _, existing := range AllowedArtifactStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ArtifactStatus value
func (v ArtifactStatus) Ptr() *ArtifactStatus {
	return &v
}

type NullableArtifactStatus struct {
	value *ArtifactStatus
	isSet bool
}

func (v NullableArtifactStatus) Get() *ArtifactStatus {
	return v.value
}

func (v *NullableArtifactStatus) Set(val *ArtifactStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactStatus(val *ArtifactStatus) *NullableArtifactStatus {
	return &NullableArtifactStatus{value: val, isSet: true}
}

func (v NullableArtifactStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

