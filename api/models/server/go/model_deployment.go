// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi


import (
	"time"
)



type Deployment struct {

	Object string `json:"object"`

	Id string `json:"id"`

	DeviceId string `json:"device_id"`

	Status string `json:"status"`

	ActivityStatus string `json:"activity_status"`

	ErrorStatus string `json:"error_status"`

	TargetStatus string `json:"target_status"`

	CreatedAt time.Time `json:"created_at"`

	DownloadingAt *time.Time `json:"downloading_at"`

	DownloadedAt *time.Time `json:"downloaded_at"`

	BootingAt *time.Time `json:"booting_at"`

	ActiveAt *time.Time `json:"active_at"`

	StoppingAt *time.Time `json:"stopping_at"`

	StoppedAt *time.Time `json:"stopped_at"`

	RemovingAt *time.Time `json:"removing_at"`

	ArchivedAt *time.Time `json:"archived_at"`

	CooldownEndsAt time.Time `json:"cooldown_ends_at"`

	CreatedBy *User `json:"created_by"`

	Artifact ArtifactWithSourceData `json:"artifact"`
}

// AssertDeploymentRequired checks if the required fields are not zero-ed
func AssertDeploymentRequired(obj Deployment) error {
	elements := map[string]interface{}{
		"object": obj.Object,
		"id": obj.Id,
		"device_id": obj.DeviceId,
		"status": obj.Status,
		"activity_status": obj.ActivityStatus,
		"error_status": obj.ErrorStatus,
		"target_status": obj.TargetStatus,
		"created_at": obj.CreatedAt,
		"downloading_at": obj.DownloadingAt,
		"downloaded_at": obj.DownloadedAt,
		"booting_at": obj.BootingAt,
		"active_at": obj.ActiveAt,
		"stopping_at": obj.StoppingAt,
		"stopped_at": obj.StoppedAt,
		"removing_at": obj.RemovingAt,
		"archived_at": obj.ArchivedAt,
		"cooldown_ends_at": obj.CooldownEndsAt,
		"created_by": obj.CreatedBy,
		"artifact": obj.Artifact,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if obj.CreatedBy != nil {
		if err := AssertUserRequired(*obj.CreatedBy); err != nil {
			return err
		}
	}
	if err := AssertArtifactWithSourceDataRequired(obj.Artifact); err != nil {
		return err
	}
	return nil
}

// AssertDeploymentConstraints checks if the values respects the defined constraints
func AssertDeploymentConstraints(obj Deployment) error {
    if obj.CreatedBy != nil {
     	if err := AssertUserConstraints(*obj.CreatedBy); err != nil {
     		return err
     	}
    }
	if err := AssertArtifactWithSourceDataConstraints(obj.Artifact); err != nil {
		return err
	}
	return nil
}
