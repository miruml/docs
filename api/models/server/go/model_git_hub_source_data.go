// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Miru API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1.0
 */

package openapi




type GitHubSourceData struct {

	Sender GitHubSourceDataSender `json:"sender"`

	Branch string `json:"branch"`

	BuildPath string `json:"build_path"`

	Repository GitHubSourceDataRepository `json:"repository"`

	HeadCommit GitHubSourceDataHeadCommit `json:"head_commit"`
}

// AssertGitHubSourceDataRequired checks if the required fields are not zero-ed
func AssertGitHubSourceDataRequired(obj GitHubSourceData) error {
	elements := map[string]interface{}{
		"sender": obj.Sender,
		"branch": obj.Branch,
		"build_path": obj.BuildPath,
		"repository": obj.Repository,
		"head_commit": obj.HeadCommit,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertGitHubSourceDataSenderRequired(obj.Sender); err != nil {
		return err
	}
	if err := AssertGitHubSourceDataRepositoryRequired(obj.Repository); err != nil {
		return err
	}
	if err := AssertGitHubSourceDataHeadCommitRequired(obj.HeadCommit); err != nil {
		return err
	}
	return nil
}

// AssertGitHubSourceDataConstraints checks if the values respects the defined constraints
func AssertGitHubSourceDataConstraints(obj GitHubSourceData) error {
	if err := AssertGitHubSourceDataSenderConstraints(obj.Sender); err != nil {
		return err
	}
	if err := AssertGitHubSourceDataRepositoryConstraints(obj.Repository); err != nil {
		return err
	}
	if err := AssertGitHubSourceDataHeadCommitConstraints(obj.HeadCommit); err != nil {
		return err
	}
	return nil
}
