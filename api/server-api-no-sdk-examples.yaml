openapi: 3.0.3
info:
  title: Miru API
  version: 0.1.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://{host}/{version}
    description: Miru API
    variables:
      host:
        default: configs.api.miruml.com
      version:
        default: v1
security:
  - ApiKeyAuth: []
paths:
  /config_instances/{config_instance_id}:
    get:
      tags:
        - Config Instances
      summary: Get
      description: Get a config instance by ID
      operationId: getConfigInstance
      parameters:
        - $ref: '#/components/parameters/config_instance_id'
        - $ref: '#/components/parameters/expand'
      responses:
        '200':
          description: Successfully retrieved the config instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigInstance'
  /config_instances:
    get:
      tags:
        - Config Instances
      summary: List
      description: List config instances
      operationId: listConfigInstances
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/order_by'
        - $ref: '#/components/parameters/expand_list'
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/target_status'
        - $ref: '#/components/parameters/activity_status'
        - $ref: '#/components/parameters/error_status'
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/config_schema_id'
        - $ref: '#/components/parameters/config_type_id'
      responses:
        '200':
          description: Successfully listed the config instances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigInstanceList'
  /config_instances/{config_instance_id}/approve:
    post:
      tags:
        - Config Instances
      summary: Approve
      description: Approve a config instance for deployment
      operationId: approveConfigInstance
      parameters:
        - $ref: '#/components/parameters/config_instance_id'
        - $ref: '#/components/parameters/expand'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveConfigInstanceRequest'
      responses:
        '200':
          description: Successfully approved the config instance for deployment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigInstance'
  /config_instances/{config_instance_id}/reject:
    post:
      tags:
        - Config Instances
      summary: Reject
      description: Reject a config instance for deployment
      operationId: rejectConfigInstance
      parameters:
        - $ref: '#/components/parameters/config_instance_id'
        - $ref: '#/components/parameters/expand'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectConfigInstanceRequest'
      responses:
        '200':
          description: Successfully rejected the config instance for deployment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigInstance'
  /config_instances/{config_instance_id}/deploy:
    post:
      tags:
        - Config Instances
      summary: Deploy
      description: Deploy a config instance to a device
      operationId: deployConfigInstance
      parameters:
        - $ref: '#/components/parameters/config_instance_id'
        - $ref: '#/components/parameters/dry_run'
      responses:
        '200':
          description: Successfully queued the config instance for deployment and queued conflicting config instances for removal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployConfigInstanceResponse'
  /devices/{device_id}:
    get:
      tags:
        - Devices
      summary: Get
      description: Get a device by ID
      operationId: getDevice
      parameters:
        - $ref: '#/components/parameters/parameters-device_id'
      responses:
        '200':
          description: Successfully retrieved the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    patch:
      tags:
        - Devices
      summary: Update
      operationId: updateDevice
      description: Update a device by ID
      parameters:
        - $ref: '#/components/parameters/parameters-device_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequest'
      responses:
        '200':
          description: Successfully updated the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      tags:
        - Devices
      summary: Delete
      operationId: deleteDevice
      description: Delete a device by ID
      parameters:
        - $ref: '#/components/parameters/parameters-device_id'
      responses:
        '200':
          description: Successfully deleted the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDevice'
  /devices:
    post:
      tags:
        - Devices
      summary: Create
      operationId: createDevice
      description: Create a new device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '200':
          description: Successfully created the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    get:
      tags:
        - Devices
      summary: List
      description: List devices
      operationId: listDevices
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/parameters-order_by'
        - $ref: '#/components/parameters/parameters-expand_list'
        - $ref: '#/components/parameters/parameters-id'
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: Successfully listed the devices.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceList'
  /devices/{device_id}/activation_token:
    post:
      tags:
        - Devices
      summary: Activation Token
      operationId: createDeviceActivationToken
      description: Create a new device activation token
      parameters:
        - $ref: '#/components/parameters/parameters-device_id'
      responses:
        '200':
          description: Successfully created the device activation token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /devices/{device_id}/stage:
    post:
      tags:
        - Devices
      summary: Stage
      operationId: stageDevice
      description: Stage a device
      parameters:
        - $ref: '#/components/parameters/parameters-device_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StageDeviceRequest'
      responses:
        '200':
          description: Successfully staged the device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: The API key to use for authentication. Retrieve your API key from the [Miru dashboard](https://configs.miruml.com/secrets/api-keys).
  parameters:
    config_instance_id:
      name: config_instance_id
      in: path
      required: true
      description: The unique identifier of the config instance
      schema:
        type: string
        example: cfg_inst_123
    expand:
      name: expand[]
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ExpandConfigInstance'
        description: The fields to expand in the config instance
    offset:
      name: offset
      in: query
      required: false
      description: The offset of the items to return. An offset of 10 with a limit of 10 returns items 11-20.
      schema:
        type: integer
        default: 0
        minimum: 0
    limit:
      name: limit
      in: query
      required: false
      description: The maximum number of items to return. A limit of 15 with an offset of 0 returns items 1-15.
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    order_by:
      name: order_by
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/ConfigInstanceOrderBy'
        description: The order to sort the config instances
    expand_list:
      name: expand[]
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ExpandConfigInstanceList'
        description: The fields to expand in the config instance list
    id:
      name: id
      in: query
      required: false
      description: The config instance ID to filter by
      schema:
        type: string
        example: cfg_inst_123
    target_status:
      name: target_status
      in: query
      required: false
      description: The config instance target status to filter by
      schema:
        $ref: '#/components/schemas/ConfigInstanceTargetStatus'
    activity_status:
      name: activity_status
      in: query
      required: false
      description: The config instance activity status to filter by
      schema:
        $ref: '#/components/schemas/ConfigInstanceActivityStatus'
    error_status:
      name: error_status
      in: query
      required: false
      description: The config instance error status to filter by
      schema:
        $ref: '#/components/schemas/ConfigInstanceErrorStatus'
    device_id:
      name: device_id
      in: query
      required: false
      description: The device ID to filter by
      schema:
        type: string
        example: dvc_123
    config_schema_id:
      name: config_schema_id
      in: query
      required: false
      description: The config schema ID to filter by
      schema:
        type: string
        example: cfg_sch_123
    config_type_id:
      name: config_type_id
      in: query
      required: false
      description: The config type ID to filter by
      schema:
        type: string
        example: cfg_typ_123
    dry_run:
      name: dry_run
      in: query
      required: false
      description: Perform a dry run that simulates the operation without making actual changes
      schema:
        type: boolean
        default: false
    parameters-device_id:
      name: device_id
      in: path
      required: true
      description: The unique identifier of the device
      schema:
        type: string
        example: dvc_123
    parameters-order_by:
      name: order_by
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/DeviceOrderBy'
        description: The order to sort the devices
    parameters-expand_list:
      name: expand[]
      in: query
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ExpandDeviceList'
        description: The fields to expand in the device list
    parameters-id:
      name: id
      in: query
      required: false
      description: The device ID to filter by
      schema:
        type: string
        example: dev_123
    name:
      name: name
      in: query
      required: false
      description: The device name to filter by
      schema:
        type: string
        example: My Device
  schemas:
    ExpandConfigInstance:
      type: string
      enum:
        - content
        - config_schema
        - device
        - config_type
      x-enum-varnames:
        - CONFIG_INSTANCE_EXPAND_CONTENT
        - CONFIG_INSTANCE_EXPAND_CONFIG_SCHEMA
        - CONFIG_INSTANCE_EXPAND_DEVICE
        - CONFIG_INSTANCE_EXPAND_CONFIG_TYPE
    ConfigInstanceTargetStatus:
      type: string
      description: |
        Desired state of the config instance
        - Created: config instance desires not to be deployed but can be deployed in the future
        - Validated: config instance desires user's custom validation before deployment can begin
        - Deployed: config instance desires to be available on the device
        - Removed: config instance desires to no longer be available on the device
      enum:
        - created
        - validated
        - deployed
        - removed
      x-enum-varnames:
        - CONFIG_INSTANCE_TARGET_STATUS_CREATED
        - CONFIG_INSTANCE_TARGET_STATUS_VALIDATED
        - CONFIG_INSTANCE_TARGET_STATUS_DEPLOYED
        - CONFIG_INSTANCE_TARGET_STATUS_REMOVED
    ConfigInstanceActivityStatus:
      type: string
      description: |
        Last known activity state of the config instance
        - Created: config instance has been created but no deployment attempt has been made
        - Validating: config instance is being validated with user's custom validation
        - Validated: config instance has been validated with user's custom validation
        - Queued: config instance will be deployed as soon as the device is back online
        - Deployed: config instance is currently available on the device
        - Removed: the config instance is no longer available on the device
      enum:
        - created
        - validating
        - validated
        - queued
        - deployed
        - removed
      x-enum-varnames:
        - CONFIG_INSTANCE_ACTIVITY_STATUS_CREATED
        - CONFIG_INSTANCE_ACTIVITY_STATUS_VALIDATING
        - CONFIG_INSTANCE_ACTIVITY_STATUS_VALIDATED
        - CONFIG_INSTANCE_ACTIVITY_STATUS_QUEUED
        - CONFIG_INSTANCE_ACTIVITY_STATUS_DEPLOYED
        - CONFIG_INSTANCE_ACTIVITY_STATUS_REMOVED
    ConfigInstanceErrorStatus:
      type: string
      description: |
        Last known error state of the config instance deployment
        - None: there are no errors with the config instance deployment
        - Retrying: an error has been encountered and the agent is attempting to try again to reach the target status
        - Failed: an error has been encountered but no more retries are left; the config instance is removed (if deployed)
      enum:
        - none
        - failed
        - retrying
      x-enum-varnames:
        - CONFIG_INSTANCE_ERROR_STATUS_NONE
        - CONFIG_INSTANCE_ERROR_STATUS_FAILED
        - CONFIG_INSTANCE_ERROR_STATUS_RETRYING
    ConfigInstanceStatus:
      type: string
      description: |
        This status merges the 'activity_status' and 'error_status' fields, with error states taking precedence over activity states when errors are present. For example, if the activity status is 'deployed' but there's an error, the overall status will be 'failed' or 'retrying' depending on the error state.
      enum:
        - created
        - validating
        - validated
        - queued
        - deployed
        - removed
        - failed
        - retrying
      x-enum-varnames:
        - CONFIG_INSTANCE_STATUS_CREATED
        - CONFIG_INSTANCE_STATUS_VALIDATING
        - CONFIG_INSTANCE_STATUS_VALIDATED
        - CONFIG_INSTANCE_STATUS_QUEUED
        - CONFIG_INSTANCE_STATUS_DEPLOYED
        - CONFIG_INSTANCE_STATUS_REMOVED
        - CONFIG_INSTANCE_STATUS_FAILED
        - CONFIG_INSTANCE_STATUS_RETRYING
    BaseConfigInstance:
      title: Base Config Instance
      type: object
      required:
        - object
        - id
        - target_status
        - activity_status
        - error_status
        - status
        - relative_filepath
        - created_at
        - updated_at
        - device_id
        - config_schema_id
        - config_type_id
      properties:
        object:
          type: string
          enum:
            - config_instance
          example: config_instance
        id:
          type: string
          example: cfg_inst_123
          description: ID of the config instance
        target_status:
          $ref: '#/components/schemas/ConfigInstanceTargetStatus'
        activity_status:
          $ref: '#/components/schemas/ConfigInstanceActivityStatus'
        error_status:
          $ref: '#/components/schemas/ConfigInstanceErrorStatus'
        status:
          $ref: '#/components/schemas/ConfigInstanceStatus'
        relative_filepath:
          type: string
          example: /v1/motion-control.json
          description: The file path to deploy the config instance relative to `/srv/miru/config_instances`. `v1/motion-control.json` would deploy to `/srv/miru/config_instances/v1/motion-control.json`
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The timestamp of when the config instance was created
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: The timestamp of when the config instance was last updated
        device_id:
          type: string
          example: dvc_123
          description: ID of the device which the config instance is deployed to
        config_schema_id:
          type: string
          example: cfg_sch_123
          description: ID of the config schema which the config instance must adhere to
        config_type_id:
          type: string
          example: cfg_type_123
          description: ID of the config type which the config instance (and its schema) is a part of
    DeviceStatus:
      type: string
      description: |
        The status of the device
        - Inactive: The miru agent has not yet been installed / authenticated
        - Staged: The device has been staged for activation
        - Activated: The miru agent has been installed and authenticated
        - Online: The miru agent is connected
        - Offline: The miru agent is disconnected (e.g. network issues, device is powered off, etc.)
      enum:
        - inactive
        - staged
        - activated
        - online
        - offline
      x-enum-varnames:
        - DEVICE_STATUS_INACTIVE
        - DEVICE_STATUS_STAGED
        - DEVICE_STATUS_ACTIVATED
        - DEVICE_STATUS_ONLINE
        - DEVICE_STATUS_OFFLINE
    BaseDevice:
      title: Base Device
      type: object
      required:
        - object
        - id
        - name
        - status
        - created_at
        - updated_at
      properties:
        object:
          type: string
          enum:
            - device
          example: device
        id:
          type: string
          example: dvc_123
          description: ID of the device
        name:
          type: string
          example: My Device
          description: Name of the device
        status:
          $ref: '#/components/schemas/DeviceStatus'
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: Timestamp of when the device was created
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: Timestamp of when the device was last updated
    Device:
      allOf:
        - $ref: '#/components/schemas/BaseDevice'
    BaseConfigSchema:
      title: Base Config Schema
      type: object
      required:
        - object
        - id
        - version
        - digest
        - relative_filepath
        - created_at
        - updated_at
        - config_type_id
        - content
      properties:
        object:
          type: string
          enum:
            - config_schema
          example: config_schema
        id:
          type: string
          example: cfg_sch_123
          description: ID of the config schema
        version:
          type: integer
          example: 2
          description: Config schema version for the config type
        digest:
          type: string
          example: '1234567890'
          description: Hash of the config schema contents
        relative_filepath:
          type: string
          description: The file path to deploy the config instance relative to `/srv/miru/config_instances`. `v1/motion-control.json` would deploy to `/srv/miru/config_instances/v1/motion-control.json`
          example: /v1/motion-control.json
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: Timestamp of when the config schema was created
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: Timestamp of when the config schema was last updated
        config_type_id:
          type: string
          example: cfg_typ_123
          description: ID of the config type
        content:
          type: object
          description: The config schema's JSON Schema definition
          example:
            title: Robot Features
            type: object
            properties:
              enable_autonomy:
                type: boolean
                default: true
              enable_remote_control:
                type: boolean
                default: true
              max_payload_kg:
                type: number
                minimum: 0
                maximum: 99
                default: 10
              preferred_speed_mode:
                type: string
                enum:
                  - slow
                  - normal
                  - fast
                default: normal
              emergency_stop_sensitivity:
                type: number
                minimum: 0
                maximum: 1
                default: 0.8
              telemetry:
                type: object
                properties:
                  upload_interval_sec:
                    type: integer
                    minimum: 10
                    maximum: 600
                    default: 60
                  heartbeat_interval_sec:
                    type: integer
                    minimum: 1
                    maximum: 60
                    default: 10
                required:
                  - upload_interval_sec
                  - heartbeat_interval_sec
            required:
              - enable_autonomy
              - enable_remote_control
              - max_payload_kg
              - preferred_speed_mode
              - emergency_stop_sensitivity
              - telemetry
          nullable: true
    BaseConfigType:
      title: Config Type
      type: object
      required:
        - object
        - id
        - name
        - slug
        - created_at
        - updated_at
      properties:
        object:
          type: string
          enum:
            - config_type
          example: config_type
        id:
          type: string
          example: cfg_123
          description: ID of the config type
        name:
          type: string
          example: My Config Type
          description: Name of the config type
        slug:
          type: string
          example: my-config-type
          description: An immutable, code-friendly name for the config type
        created_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: Timestamp of when the config type was created
        updated_at:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
          description: Timestamp of when the config type was last updated
    PaginatedList:
      title: Paginated List
      type: object
      required:
        - object
        - total_count
        - limit
        - offset
        - has_more
      properties:
        object:
          type: string
          enum:
            - list
          example: list
        total_count:
          type: integer
          format: int64
          description: The total number of items in the list. By default the total count is not returned. The total count must be expanded (using expand[]=total_count) to get the total number of items in the list.
        limit:
          type: integer
          description: The maximum number of items to return. A limit of 15 with an offset of 0 returns items 1-15.
          default: 10
          minimum: 1
          maximum: 100
        offset:
          type: integer
          description: The offset of the items to return. An offset of 10 with a limit of 10 returns items 11-20.
          default: 0
          minimum: 0
        has_more:
          type: boolean
          description: True if there are more items in the list to return. False if there are no more items to return.
          example: false
    ConfigSchema:
      title: Config Schema
      allOf:
        - $ref: '#/components/schemas/BaseConfigSchema'
        - type: object
          required:
            - config_type
          properties:
            config_type:
              allOf:
                - $ref: '#/components/schemas/ConfigType'
              nullable: true
              description: Expand the config type using 'expand[]=config_type' in the query string
              example: null
    ConfigSchemaList:
      title: Config Schema List
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConfigSchema'
    ConfigType:
      title: Config Type
      allOf:
        - $ref: '#/components/schemas/BaseConfigType'
        - type: object
          required:
            - config_schemas
          properties:
            config_schemas:
              allOf:
                - $ref: '#/components/schemas/ConfigSchemaList'
              nullable: true
              description: Expand the config schemas using 'expand[]=schemas' in the query string
              example:
                object: list
                total_count: -1
                limit: -1
                offset: -1
                has_more: false
                data: []
    ConfigInstance:
      title: Config Instance
      allOf:
        - $ref: '#/components/schemas/BaseConfigInstance'
        - type: object
          required:
            - device
            - config_schema
            - config_type
            - content
          properties:
            device:
              allOf:
                - $ref: '#/components/schemas/Device'
              nullable: true
              example: null
            config_schema:
              allOf:
                - $ref: '#/components/schemas/ConfigSchema'
              nullable: true
              description: Expand the config schema using 'expand[]=config_schema' in the query string
              example: null
            config_type:
              allOf:
                - $ref: '#/components/schemas/ConfigType'
              nullable: true
              description: Expand the config type using 'expand[]=config_type' in the query string
              example: null
            content:
              type: object
              description: The configuration values associated with the config instance. Expand the content using 'expand[]=content' in the query string
              example:
                enable_autonomy: true
                enable_remote_control: false
                max_payload_kg: 8.5
                preferred_speed_mode: normal
                emergency_stop_sensitivity: 0.9
                telemetry:
                  upload_interval_sec: 45
                  heartbeat_interval_sec: 15
              nullable: true
    ConfigInstanceOrderBy:
      type: string
      enum:
        - id:asc
        - id:desc
        - created_at:desc
        - created_at:asc
      x-enum-varnames:
        - CONFIG_INSTANCE_ORDER_BY_ID_ASC
        - CONFIG_INSTANCE_ORDER_BY_ID_DESC
        - CONFIG_INSTANCE_ORDER_BY_CREATED_AT_DESC
        - CONFIG_INSTANCE_ORDER_BY_CREATED_AT_ASC
      default: created_at:desc
    ExpandConfigInstanceList:
      type: string
      enum:
        - total_count
        - content
        - config_schema
        - device
        - config_type
      x-enum-varnames:
        - CONFIG_INSTANCE_LIST_EXPAND_WITH_TOTAL_COUNT
        - CONFIG_INSTANCE_LIST_EXPAND_CONTENT
        - CONFIG_INSTANCE_LIST_EXPAND_CONFIG_SCHEMA
        - CONFIG_INSTANCE_LIST_EXPAND_DEVICE
        - CONFIG_INSTANCE_LIST_EXPAND_CONFIG_TYPE
    ConfigInstanceList:
      title: Config Instance List
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConfigInstance'
    ApproveConfigInstanceRequest:
      title: Approve Config Instance Request
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: A high level success message displayed to the user
          example: The config instance has been approved
    RejectConfigInstanceRequest:
      title: Reject Config Instance Request
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
          description: A high level error message displayed to the user
          example: The config instance contains additional parameters that are not supported by the config schema
        errors:
          type: array
          items:
            type: object
            required:
              - parameter_path
              - message
            properties:
              parameter_path:
                type: array
                items:
                  type: string
                  description: The path to the parameter that is causing the error
                example:
                  - motion_detection
                  - sensitivity
              message:
                type: string
                description: A detailed message explaining why the parameter is causing the error
                example: Motion detection sensitivity must be between 0 and 100
    ConfigInstanceRemovalCode:
      title: Config Instance Removal Code
      type: string
      enum:
        - device_file_path_conflict
        - device_config_schema_conflict
      description: |
        The reason the config instance was removed
        - device_file_path_conflict: the config instance is currently deployed to the same device with the same file path as the new config instance to deploy
        - device_config_schema_conflict: the config instance is currently deployed to the same device with the same config schema as the new config instance to deploy
      example: device_file_path_conflict
    RemoveConfigInstanceResponse:
      title: Remove Config Instance Response
      type: object
      required:
        - code
        - explanation
        - config_instance
      properties:
        code:
          $ref: '#/components/schemas/ConfigInstanceRemovalCode'
        explanation:
          type: string
          description: |
            A human-readable explanation of why the config instance must be removed for the new config instance to be able to be deployed
          example: Config instance cfg_inst_123 has the same device and file path as cfg_inst_456
        config_instance:
          $ref: '#/components/schemas/ConfigInstance'
    DeployConfigInstanceResponse:
      title: Deploy Config Instance Response
      type: object
      required:
        - deploy
        - remove
      properties:
        deploy:
          $ref: '#/components/schemas/ConfigInstance'
        remove:
          type: array
          items:
            $ref: '#/components/schemas/RemoveConfigInstanceResponse'
    DeleteDevice:
      title: Delete Device
      type: object
      required:
        - object
        - id
        - deleted
      properties:
        object:
          type: string
          enum:
            - device
          example: device
        id:
          type: string
          example: dvc_123
        deleted:
          type: boolean
          example: true
    UpdateDeviceRequest:
      title: Update Device Request
      type: object
      properties:
        name:
          type: string
          description: The new name of the device. If null or excluded from the request, the device name is not updated.
          example: Robot 1
          nullable: true
    DeviceOrderBy:
      type: string
      enum:
        - id:asc
        - id:desc
        - created_at:desc
        - created_at:asc
      x-enum-varnames:
        - DEVICE_ORDER_BY_ID_ASC
        - DEVICE_ORDER_BY_ID_DESC
        - DEVICE_ORDER_BY_CREATED_AT_DESC
        - DEVICE_ORDER_BY_CREATED_AT_ASC
      default: created_at:desc
    ExpandDeviceList:
      type: string
      enum:
        - total_count
      x-enum-varnames:
        - DEVICE_LIST_EXPAND_WITH_TOTAL_COUNT
    DeviceList:
      allOf:
        - $ref: '#/components/schemas/PaginatedList'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Device'
    CreateDeviceRequest:
      title: Create Device Request
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the device. Use $HOSTNAME to postpone device naming until activation, where the device's hostname will be used.
          example: Robot 1
    TokenResponse:
      title: Token Response
      type: object
      required:
        - token
        - expires_at
      properties:
        token:
          type: string
          description: The token
          example: eyJhbGciOiJ...
        expires_at:
          type: string
          format: date-time
          description: The expiration date and time of the token.
          example: '2025-01-01T00:00:00Z'
    StageConfigInstanceRequest:
      title: Stage Config Instance Request
      type: object
      required:
        - relative_filepath
        - content
        - config_schema_id
      properties:
        relative_filepath:
          type: string
          description: The file path to deploy the config instance relative to `/srv/miru/config_instances`. `v1/motion-control.json` would deploy to `/srv/miru/config_instances/v1/motion-control.json`
          example: /v1/motion-control.json
        content:
          type: object
          description: The configuration values associated with the config instance.
          example:
            direction: forward
            speed: 100
            duration: 10
        config_schema_id:
          type: string
          description: The id of the config schema which this config instance must adhere to.
          example: cfg_sch_123
    StageDeviceRequest:
      title: Stage Device Request
      type: object
      required:
        - config_instances
      properties:
        config_instances:
          type: array
          description: The config instances to stage on the device. These config instances will be deployed to the device as soon as it is activated.
          items:
            $ref: '#/components/schemas/StageConfigInstanceRequest'
